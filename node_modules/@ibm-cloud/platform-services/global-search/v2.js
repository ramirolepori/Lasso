"use strict";
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 3.33.0-caf29bd0-20210603-225214
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * Search for resources with the global and shared resource properties repository integrated in the IBM Cloud platform.
 * The search repository stores and searches cloud resources attributes, which categorize or classify resources. A
 * resource is a physical or logical component that can be created or reserved for an application or service instance
 * and is owned by resource providers, such as Cloud Foundry, IBM Kubernetes Service, or resource controller in IBM
 * Cloud. Resources are uniquely identified by a Cloud Resource Name (CRN)  or by an IMS ID. The properties of a
 * resource include tags and system properties. Both properties are defined in an IBM Cloud billing account, and span
 * across many regions.
 */
var GlobalSearchV2 = /** @class */ (function (_super) {
    __extends(GlobalSearchV2, _super);
    /**
     * Construct a GlobalSearchV2 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {GlobalSearchV2}
     */
    function GlobalSearchV2(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(GlobalSearchV2.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of GlobalSearchV2 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {GlobalSearchV2}
     */
    GlobalSearchV2.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = (0, ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment)(options.serviceName);
        }
        var service = new GlobalSearchV2(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * search
     ************************/
    /**
     * Find instances of resources (v3).
     *
     * Find Cloud Foundry resources, IAM-enabled resources, or  storage and network resources running on classic
     * infrastructure in a  specific account ID. You can apply query strings if necessary.
     *
     * To filter results, you can insert a string using the Lucene syntax and the  query string is parsed into a series of
     * terms and operators. A term can be  a single word or a phrase, in which case the search is performed for all  the
     * words, in the same order. To filter for a specific value regardless of  the property that contains it, type the
     * search term without specifying a  field. Only resources that belong to the account ID and that are accessible  by
     * the client are returned.
     *
     * You must use `/v3/resources/search` when you need to fetch more than `10000`  resource items. The
     * `/v2/resources/search` prohibits paginating through such  a big number. On the first call, the operation returns a
     * live cursor on the  data that you must use on all the subsequent calls to get the next batch of  results until you
     * get the empty result set. By default, the fields returned  for every resource are "crn", "name", "family", "type",
     * and "account_id". You  can specify the subset of the fields you want in your request.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.query] - The Lucene-formatted query string. Default to '*' if not set.
     * @param {string[]} [params.fields] - The list of the fields returned by the search. Defaults to all. `crn` is always
     * returned.
     * @param {string} [params.searchCursor] - An opaque search cursor that is returned on each operation call and that
     * must be set on next call.
     * @param {string} [params.transactionId] - An aplhanumeric string that can be used to trace a request across
     * services. If not specified it will be automatically generated with the prefix "gst-".
     * @param {string} [params.accountId] - The account ID to filter resources.
     * @param {number} [params.limit] - The maximum number of hits to return. Defaults to 10.
     * @param {number} [params.timeout] - A search timeout, bounding the search request to be executed within the
     * specified time value and bail with the hits accumulated up to that point when expired. Defaults to the system
     * defined timeout.
     * @param {string[]} [params.sort] - Comma separated properties names used for sorting.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<GlobalSearchV2.Response<GlobalSearchV2.ScanResult>>}
     */
    GlobalSearchV2.prototype.search = function (params) {
        var _params = __assign({}, params);
        var body = {
            'query': _params.query,
            'fields': _params.fields,
            'search_cursor': _params.searchCursor,
        };
        var query = {
            'account_id': _params.accountId,
            'limit': _params.limit,
            'timeout': _params.timeout,
            'sort': _params.sort,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(GlobalSearchV2.DEFAULT_SERVICE_NAME, 'v2', 'search');
        var parameters = {
            options: {
                url: '/v3/resources/search',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'transaction-id': _params.transactionId,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * resourceTypes
     ************************/
    /**
     * DEPRECATED. Get all GhoST indices.
     *
     * Retrieves a list of all GhoST indices.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<GlobalSearchV2.Response<GlobalSearchV2.SupportedTypesList>>}
     */
    GlobalSearchV2.prototype.getSupportedTypes = function (params) {
        var _params = __assign({}, params);
        var sdkHeaders = (0, common_1.getSdkHeaders)(GlobalSearchV2.DEFAULT_SERVICE_NAME, 'v2', 'getSupportedTypes');
        var parameters = {
            options: {
                url: '/v2/resources/supported_types',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    GlobalSearchV2.DEFAULT_SERVICE_URL = 'https://api.global-search-tagging.cloud.ibm.com';
    GlobalSearchV2.DEFAULT_SERVICE_NAME = 'global_search';
    return GlobalSearchV2;
}(ibm_cloud_sdk_core_1.BaseService));
module.exports = GlobalSearchV2;
//# sourceMappingURL=v2.js.map