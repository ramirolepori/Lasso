/**
 * (C) Copyright IBM Corp. 2022.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import { BaseService, UserOptions } from 'ibm-cloud-sdk-core';
/**
 * IAM Policy Management API
 *
 * API Version: 1.0.1
 */
declare class IamPolicyManagementV1 extends BaseService {
    static DEFAULT_SERVICE_URL: string;
    static DEFAULT_SERVICE_NAME: string;
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of IamPolicyManagementV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {IamPolicyManagementV1}
     */
    static newInstance(options: UserOptions): IamPolicyManagementV1;
    /**
     * Construct a IamPolicyManagementV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {IamPolicyManagementV1}
     */
    constructor(options: UserOptions);
    /*************************
     * policies
     ************************/
    /**
     * Get policies by attributes.
     *
     * Get policies and filter by attributes. While managing policies, you may want to retrieve policies in the account
     * and filter by attribute values. This can be done through query parameters. Currently, only the following attributes
     * are supported: account_id, iam_id, access_group_id, type, service_type, sort, format and state. account_id is a
     * required query parameter. Only policies that have the specified attributes and that the caller has read access to
     * are returned. If the caller does not have read access to any policies an empty array is returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - The account GUID in which the policies belong to.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {string} [params.iamId] - Optional IAM ID used to identify the subject.
     * @param {string} [params.accessGroupId] - Optional access group id.
     * @param {string} [params.type] - Optional type of policy.
     * @param {string} [params.serviceType] - Optional type of service.
     * @param {string} [params.tagName] - Optional name of the access management tag in the policy.
     * @param {string} [params.tagValue] - Optional value of the access management tag in the policy.
     * @param {string} [params.sort] - Optional top level policy field to sort results. Ascending sort is default.
     * Descending sort available by prepending '-' to field. Example '-last_modified_at'.
     * @param {string} [params.format] - Include additional data per policy returned
     * * `include_last_permit` - returns details of when the policy last granted a permit decision and the number of times
     * it has done so
     * * `display` - returns the list of all actions included in each of the policy roles.
     * @param {string} [params.state] - The state of the policy.
     * * `active` - returns active policies
     * * `deleted` - returns non-active policies.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyList>>}
     */
    listPolicies(params: IamPolicyManagementV1.ListPoliciesParams): Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.PolicyList>>;
    /**
     * Create a policy.
     *
     * Creates a policy to grant access between a subject and a resource. There are two types of policies: **access** and
     * **authorization**. A policy administrator might want to create an access policy which grants access to a user,
     * service-id, or an access group. They might also want to create an authorization policy and setup access between
     * services.
     *
     * ### Access
     *
     * To create an access policy, use **`"type": "access"`** in the body. The possible subject attributes are
     * **`iam_id`** and **`access_group_id`**. Use the **`iam_id`** subject attribute for assigning access for a user or
     * service-id. Use the **`access_group_id`** subject attribute for assigning access for an access group. The roles
     * must be a subset of a service's or the platform's supported roles. The resource attributes must be a subset of a
     * service's or the platform's supported attributes. The policy resource must include either the **`serviceType`**,
     * **`serviceName`**, **`resourceGroupId`** or **`service_group_id`** attribute and the **`accountId`** attribute.`
     * The IAM Services group (`IAM`) is a subset of account management services that includes the IAM platform services
     * IAM Identity, IAM Access Management, IAM Users Management, IAM Groups, and future IAM services. If the subject is a
     * locked service-id, the request will fail.
     *
     * ### Authorization
     *
     * Authorization policies are supported by services on a case by case basis. Refer to service documentation to verify
     * their support of authorization policies. To create an authorization policy, use **`"type": "authorization"`** in
     * the body. The subject attributes must match the supported authorization subjects of the resource. Multiple subject
     * attributes might be provided. The following attributes are supported:
     *   serviceName, serviceInstance, region, resourceType, resource, accountId The policy roles must be a subset of the
     * supported authorization roles supported by the target service. The user must also have the same level of access or
     * greater to the target resource in order to grant the role. The resource attributes must be a subset of a service's
     * or the platform's supported attributes. Both the policy subject and the policy resource must include the
     * **`serviceName`** and **`accountId`** attributes.
     *
     * ### Attribute Operators
     *
     * Currently, only the `stringEquals` and the `stringMatch` operators are available. Resource attributes may support
     * one or both operators. For more information, see [how to assign access by using wildcards
     * policies](https://cloud.ibm.com/docs/account?topic=account-wildcard).
     *
     * ### Attribute Validations
     *
     * Policy attribute values must be between 1 and 1,000 characters in length. If location related attributes like
     * geography, country, metro, region, satellite, and locationvalues are supported by the service, they are validated
     * against Global Catalog locations.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.type - The policy type; either 'access' or 'authorization'.
     * @param {PolicySubject[]} params.subjects - The subjects associated with a policy.
     * @param {PolicyRole[]} params.roles - A set of role cloud resource names (CRNs) granted by the policy.
     * @param {PolicyResource[]} params.resources - The resources associated with a policy.
     * @param {string} [params.description] - Customer-defined description.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.Policy>>}
     */
    createPolicy(params: IamPolicyManagementV1.CreatePolicyParams): Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.Policy>>;
    /**
     * Update a policy.
     *
     * Update a policy to grant access between a subject and a resource. A policy administrator might want to update an
     * existing policy. The policy type cannot be changed (You cannot change an access policy to an authorization policy).
     *
     * ### Access
     *
     * To update an access policy, use **`"type": "access"`** in the body. The possible subject attributes are
     * **`iam_id`** and **`access_group_id`**. Use the **`iam_id`** subject attribute for assigning access for a user or
     * service-id. Use the **`access_group_id`** subject attribute for assigning access for an access group. The roles
     * must be a subset of a service's or the platform's supported roles. The resource attributes must be a subset of a
     * service's or the platform's supported attributes. The policy resource must include either the **`serviceType`**,
     * **`serviceName`**,  or **`resourceGroupId`** attribute and the **`accountId`** attribute.` If the subject is a
     * locked service-id, the request will fail.
     *
     * ### Authorization
     *
     * To update an authorization policy, use **`"type": "authorization"`** in the body. The subject attributes must match
     * the supported authorization subjects of the resource. Multiple subject attributes might be provided. The following
     * attributes are supported:
     *   serviceName, serviceInstance, region, resourceType, resource, accountId The policy roles must be a subset of the
     * supported authorization roles supported by the target service. The user must also have the same level of access or
     * greater to the target resource in order to grant the role. The resource attributes must be a subset of a service's
     * or the platform's supported attributes. Both the policy subject and the policy resource must include the
     * **`serviceName`** and **`accountId`** attributes.
     *
     * ### Attribute Operators
     *
     * Currently, only the `stringEquals` and the `stringMatch` operators are available. Resource attributes might support
     * one or both operators. For more information, see [how to assign access by using wildcards
     * policies](https://cloud.ibm.com/docs/account?topic=account-wildcard).
     *
     * ### Attribute Validations
     *
     * Policy attribute values must be between 1 and 1,000 characters in length. If location related attributes like
     * geography, country, metro, region, satellite, and locationvalues are supported by the service, they are validated
     * against Global Catalog locations.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyId - The policy ID.
     * @param {string} params.ifMatch - The revision number for updating a policy and must match the ETag value of the
     * existing policy. The Etag can be retrieved using the GET /v1/policies/{policy_id} API and looking at the ETag
     * response header.
     * @param {string} params.type - The policy type; either 'access' or 'authorization'.
     * @param {PolicySubject[]} params.subjects - The subjects associated with a policy.
     * @param {PolicyRole[]} params.roles - A set of role cloud resource names (CRNs) granted by the policy.
     * @param {PolicyResource[]} params.resources - The resources associated with a policy.
     * @param {string} [params.description] - Customer-defined description.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.Policy>>}
     */
    updatePolicy(params: IamPolicyManagementV1.UpdatePolicyParams): Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.Policy>>;
    /**
     * Retrieve a policy by ID.
     *
     * Retrieve a policy by providing a policy ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyId - The policy ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.Policy>>}
     */
    getPolicy(params: IamPolicyManagementV1.GetPolicyParams): Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.Policy>>;
    /**
     * Delete a policy by ID.
     *
     * Delete a policy by providing a policy ID. A policy cannot be deleted if the subject ID contains a locked service
     * ID. If the subject of the policy is a locked service-id, the request will fail.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyId - The policy ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.EmptyObject>>}
     */
    deletePolicy(params: IamPolicyManagementV1.DeletePolicyParams): Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.EmptyObject>>;
    /**
     * Restore a deleted policy by ID.
     *
     * Restore a policy that has recently been deleted. A policy administrator might want to restore a deleted policy. To
     * restore a policy, use **`"state": "active"`** in the body.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.policyId - The policy ID.
     * @param {string} params.ifMatch - The revision number for updating a policy and must match the ETag value of the
     * existing policy. The Etag can be retrieved using the GET /v1/policies/{policy_id} API and looking at the ETag
     * response header.
     * @param {string} [params.state] - The policy state.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.Policy>>}
     */
    patchPolicy(params: IamPolicyManagementV1.PatchPolicyParams): Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.Policy>>;
    /*************************
     * roles
     ************************/
    /**
     * Get roles by filters.
     *
     * Get roles based on the filters. While managing roles, you may want to retrieve roles and filter by usages. This can
     * be done through query parameters. Currently, we only support the following attributes: account_id, service_name,
     * source_service_name and policy_type. Only roles that match the filter and that the caller has read access to are
     * returned. If the caller does not have read access to any roles an empty array is returned.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {string} [params.accountId] - Optional account GUID in which the roles belong to.
     * @param {string} [params.serviceName] - Optional name of IAM enabled service.
     * @param {string} [params.sourceServiceName] - Optional name of source IAM enabled service.
     * @param {string} [params.policyType] - Optional Policy Type.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.RoleList>>}
     */
    listRoles(params?: IamPolicyManagementV1.ListRolesParams): Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.RoleList>>;
    /**
     * Create a role.
     *
     * Creates a custom role for a specific service within the account. An account owner or a user assigned the
     * Administrator role on the Role management service can create a custom role. Any number of actions for a single
     * service can be mapped to the new role, but there must be at least one service-defined action to successfully create
     * the new role.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.displayName - The display name of the role that is shown in the console.
     * @param {string[]} params.actions - The actions of the role. Please refer to [IAM roles and
     * actions](https://cloud.ibm.com/docs/account?topic=account-iam-service-roles-actions).
     * @param {string} params.name - The name of the role that is used in the CRN. Can only be alphanumeric and has to be
     * capitalized.
     * @param {string} params.accountId - The account GUID.
     * @param {string} params.serviceName - The service name.
     * @param {string} [params.description] - The description of the role.
     * @param {string} [params.acceptLanguage] - Language code for translations
     * * `default` - English
     * * `de` -  German (Standard)
     * * `en` - English
     * * `es` - Spanish (Spain)
     * * `fr` - French (Standard)
     * * `it` - Italian (Standard)
     * * `ja` - Japanese
     * * `ko` - Korean
     * * `pt-br` - Portuguese (Brazil)
     * * `zh-cn` - Chinese (Simplified, PRC)
     * * `zh-tw` - (Chinese, Taiwan).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.CustomRole>>}
     */
    createRole(params: IamPolicyManagementV1.CreateRoleParams): Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.CustomRole>>;
    /**
     * Update a role.
     *
     * Update a custom role. A role administrator might want to update an existing role by updating the display name,
     * description, or the actions that are mapped to the role. The name, account_id, and service_name can't be changed.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.roleId - The role ID.
     * @param {string} params.ifMatch - The revision number for updating a role and must match the ETag value of the
     * existing role. The Etag can be retrieved using the GET /v2/roles/{role_id} API and looking at the ETag response
     * header.
     * @param {string} [params.displayName] - The display name of the role that is shown in the console.
     * @param {string} [params.description] - The description of the role.
     * @param {string[]} [params.actions] - The actions of the role. Please refer to [IAM roles and
     * actions](https://cloud.ibm.com/docs/account?topic=account-iam-service-roles-actions).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.CustomRole>>}
     */
    updateRole(params: IamPolicyManagementV1.UpdateRoleParams): Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.CustomRole>>;
    /**
     * Retrieve a role by ID.
     *
     * Retrieve a role by providing a role ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.roleId - The role ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.CustomRole>>}
     */
    getRole(params: IamPolicyManagementV1.GetRoleParams): Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.CustomRole>>;
    /**
     * Delete a role by ID.
     *
     * Delete a role by providing a role ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.roleId - The role ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.EmptyObject>>}
     */
    deleteRole(params: IamPolicyManagementV1.DeleteRoleParams): Promise<IamPolicyManagementV1.Response<IamPolicyManagementV1.EmptyObject>>;
}
/*************************
 * interfaces
 ************************/
declare namespace IamPolicyManagementV1 {
    /** An operation response. */
    interface Response<T = any> {
        result: T;
        status: number;
        statusText: string;
        headers: IncomingHttpHeaders;
    }
    /** The callback for a service request. */
    type Callback<T> = (error: any, response?: Response<T>) => void;
    /** The body of a service request that returns no response data. */
    interface EmptyObject {
    }
    /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
    interface JsonObject {
        [key: string]: any;
    }
    /*************************
     * request interfaces
     ************************/
    /** Parameters for the `listPolicies` operation. */
    interface ListPoliciesParams {
        /** The account GUID in which the policies belong to. */
        accountId: string;
        /** Language code for translations
         *  * `default` - English
         *  * `de` -  German (Standard)
         *  * `en` - English
         *  * `es` - Spanish (Spain)
         *  * `fr` - French (Standard)
         *  * `it` - Italian (Standard)
         *  * `ja` - Japanese
         *  * `ko` - Korean
         *  * `pt-br` - Portuguese (Brazil)
         *  * `zh-cn` - Chinese (Simplified, PRC)
         *  * `zh-tw` - (Chinese, Taiwan).
         */
        acceptLanguage?: string;
        /** Optional IAM ID used to identify the subject. */
        iamId?: string;
        /** Optional access group id. */
        accessGroupId?: string;
        /** Optional type of policy. */
        type?: ListPoliciesConstants.Type | string;
        /** Optional type of service. */
        serviceType?: ListPoliciesConstants.ServiceType | string;
        /** Optional name of the access management tag in the policy. */
        tagName?: string;
        /** Optional value of the access management tag in the policy. */
        tagValue?: string;
        /** Optional top level policy field to sort results. Ascending sort is default. Descending sort available by
         *  prepending '-' to field. Example '-last_modified_at'.
         */
        sort?: ListPoliciesConstants.Sort | string;
        /** Include additional data per policy returned
         *  * `include_last_permit` - returns details of when the policy last granted a permit decision and the number of
         *  times it has done so
         *  * `display` - returns the list of all actions included in each of the policy roles.
         */
        format?: ListPoliciesConstants.Format | string;
        /** The state of the policy. * `active` - returns active policies * `deleted` - returns non-active policies. */
        state?: ListPoliciesConstants.State | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `listPolicies` operation. */
    namespace ListPoliciesConstants {
        /** Optional type of policy. */
        enum Type {
            ACCESS = "access",
            AUTHORIZATION = "authorization"
        }
        /** Optional type of service. */
        enum ServiceType {
            SERVICE = "service",
            PLATFORM_SERVICE = "platform_service"
        }
        /** Optional top level policy field to sort results. Ascending sort is default. Descending sort available by prepending '-' to field. Example '-last_modified_at'. */
        enum Sort {
            ID = "id",
            TYPE = "type",
            HREF = "href",
            CREATED_AT = "created_at",
            CREATED_BY_ID = "created_by_id",
            LAST_MODIFIED_AT = "last_modified_at",
            LAST_MODIFIED_BY_ID = "last_modified_by_id",
            STATE = "state"
        }
        /** Include additional data per policy returned * `include_last_permit` - returns details of when the policy last granted a permit decision and the number of times it has done so * `display` - returns the list of all actions included in each of the policy roles. */
        enum Format {
            INCLUDE_LAST_PERMIT = "include_last_permit",
            DISPLAY = "display"
        }
        /** The state of the policy. * `active` - returns active policies * `deleted` - returns non-active policies. */
        enum State {
            ACTIVE = "active",
            DELETED = "deleted"
        }
    }
    /** Parameters for the `createPolicy` operation. */
    interface CreatePolicyParams {
        /** The policy type; either 'access' or 'authorization'. */
        type: string;
        /** The subjects associated with a policy. */
        subjects: PolicySubject[];
        /** A set of role cloud resource names (CRNs) granted by the policy. */
        roles: PolicyRole[];
        /** The resources associated with a policy. */
        resources: PolicyResource[];
        /** Customer-defined description. */
        description?: string;
        /** Language code for translations
         *  * `default` - English
         *  * `de` -  German (Standard)
         *  * `en` - English
         *  * `es` - Spanish (Spain)
         *  * `fr` - French (Standard)
         *  * `it` - Italian (Standard)
         *  * `ja` - Japanese
         *  * `ko` - Korean
         *  * `pt-br` - Portuguese (Brazil)
         *  * `zh-cn` - Chinese (Simplified, PRC)
         *  * `zh-tw` - (Chinese, Taiwan).
         */
        acceptLanguage?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `updatePolicy` operation. */
    interface UpdatePolicyParams {
        /** The policy ID. */
        policyId: string;
        /** The revision number for updating a policy and must match the ETag value of the existing policy. The Etag can
         *  be retrieved using the GET /v1/policies/{policy_id} API and looking at the ETag response header.
         */
        ifMatch: string;
        /** The policy type; either 'access' or 'authorization'. */
        type: string;
        /** The subjects associated with a policy. */
        subjects: PolicySubject[];
        /** A set of role cloud resource names (CRNs) granted by the policy. */
        roles: PolicyRole[];
        /** The resources associated with a policy. */
        resources: PolicyResource[];
        /** Customer-defined description. */
        description?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getPolicy` operation. */
    interface GetPolicyParams {
        /** The policy ID. */
        policyId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deletePolicy` operation. */
    interface DeletePolicyParams {
        /** The policy ID. */
        policyId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `patchPolicy` operation. */
    interface PatchPolicyParams {
        /** The policy ID. */
        policyId: string;
        /** The revision number for updating a policy and must match the ETag value of the existing policy. The Etag can
         *  be retrieved using the GET /v1/policies/{policy_id} API and looking at the ETag response header.
         */
        ifMatch: string;
        /** The policy state. */
        state?: PatchPolicyConstants.State | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `patchPolicy` operation. */
    namespace PatchPolicyConstants {
        /** The policy state. */
        enum State {
            ACTIVE = "active",
            DELETED = "deleted"
        }
    }
    /** Parameters for the `listRoles` operation. */
    interface ListRolesParams {
        /** Language code for translations
         *  * `default` - English
         *  * `de` -  German (Standard)
         *  * `en` - English
         *  * `es` - Spanish (Spain)
         *  * `fr` - French (Standard)
         *  * `it` - Italian (Standard)
         *  * `ja` - Japanese
         *  * `ko` - Korean
         *  * `pt-br` - Portuguese (Brazil)
         *  * `zh-cn` - Chinese (Simplified, PRC)
         *  * `zh-tw` - (Chinese, Taiwan).
         */
        acceptLanguage?: string;
        /** Optional account GUID in which the roles belong to. */
        accountId?: string;
        /** Optional name of IAM enabled service. */
        serviceName?: string;
        /** Optional name of source IAM enabled service. */
        sourceServiceName?: string;
        /** Optional Policy Type. */
        policyType?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `createRole` operation. */
    interface CreateRoleParams {
        /** The display name of the role that is shown in the console. */
        displayName: string;
        /** The actions of the role. Please refer to [IAM roles and
         *  actions](https://cloud.ibm.com/docs/account?topic=account-iam-service-roles-actions).
         */
        actions: string[];
        /** The name of the role that is used in the CRN. Can only be alphanumeric and has to be capitalized. */
        name: string;
        /** The account GUID. */
        accountId: string;
        /** The service name. */
        serviceName: string;
        /** The description of the role. */
        description?: string;
        /** Language code for translations
         *  * `default` - English
         *  * `de` -  German (Standard)
         *  * `en` - English
         *  * `es` - Spanish (Spain)
         *  * `fr` - French (Standard)
         *  * `it` - Italian (Standard)
         *  * `ja` - Japanese
         *  * `ko` - Korean
         *  * `pt-br` - Portuguese (Brazil)
         *  * `zh-cn` - Chinese (Simplified, PRC)
         *  * `zh-tw` - (Chinese, Taiwan).
         */
        acceptLanguage?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `updateRole` operation. */
    interface UpdateRoleParams {
        /** The role ID. */
        roleId: string;
        /** The revision number for updating a role and must match the ETag value of the existing role. The Etag can be
         *  retrieved using the GET /v2/roles/{role_id} API and looking at the ETag response header.
         */
        ifMatch: string;
        /** The display name of the role that is shown in the console. */
        displayName?: string;
        /** The description of the role. */
        description?: string;
        /** The actions of the role. Please refer to [IAM roles and
         *  actions](https://cloud.ibm.com/docs/account?topic=account-iam-service-roles-actions).
         */
        actions?: string[];
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getRole` operation. */
    interface GetRoleParams {
        /** The role ID. */
        roleId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteRole` operation. */
    interface DeleteRoleParams {
        /** The role ID. */
        roleId: string;
        headers?: OutgoingHttpHeaders;
    }
    /*************************
     * model interfaces
     ************************/
    /** An additional set of properties associated with a role. */
    interface CustomRole {
        /** The role ID. Composed of hexadecimal characters. */
        id?: string;
        /** The display name of the role that is shown in the console. */
        display_name?: string;
        /** The description of the role. */
        description?: string;
        /** The actions of the role. Please refer to [IAM roles and
         *  actions](https://cloud.ibm.com/docs/account?topic=account-iam-service-roles-actions).
         */
        actions?: string[];
        /** The role Cloud Resource Name (CRN). Example CRN:
         *  'crn:v1:ibmcloud:public:iam-access-management::a/exampleAccountId::customRole:ExampleRoleName'.
         */
        crn?: string;
        /** The name of the role that is used in the CRN. Can only be alphanumeric and has to be capitalized. */
        name?: string;
        /** The account GUID. */
        account_id?: string;
        /** The service name. */
        service_name?: string;
        /** The UTC timestamp when the role was created. */
        created_at?: string;
        /** The iam ID of the entity that created the role. */
        created_by_id?: string;
        /** The UTC timestamp when the role was last modified. */
        last_modified_at?: string;
        /** The iam ID of the entity that last modified the policy. */
        last_modified_by_id?: string;
        /** The href link back to the role. */
        href?: string;
    }
    /** The core set of properties associated with a policy. */
    interface Policy {
        /** The policy ID. */
        id?: string;
        /** The policy type; either 'access' or 'authorization'. */
        type?: string;
        /** Customer-defined description. */
        description?: string;
        /** The subjects associated with a policy. */
        subjects?: PolicySubject[];
        /** A set of role cloud resource names (CRNs) granted by the policy. */
        roles?: PolicyRole[];
        /** The resources associated with a policy. */
        resources?: PolicyResource[];
        /** The href link back to the policy. */
        href?: string;
        /** The UTC timestamp when the policy was created. */
        created_at?: string;
        /** The iam ID of the entity that created the policy. */
        created_by_id?: string;
        /** The UTC timestamp when the policy was last modified. */
        last_modified_at?: string;
        /** The iam ID of the entity that last modified the policy. */
        last_modified_by_id?: string;
        /** The policy state. */
        state?: string;
    }
    /** A collection of policies. */
    interface PolicyList {
        /** List of policies. */
        policies?: Policy[];
    }
    /** The attributes of the resource. Note that only one resource is allowed in a policy. */
    interface PolicyResource {
        /** List of resource attributes. */
        attributes?: ResourceAttribute[];
        /** List of access management tags. */
        tags?: ResourceTag[];
    }
    /** A role associated with a policy. */
    interface PolicyRole {
        /** The role Cloud Resource Name (CRN) granted by the policy. Example CRN:
         *  'crn:v1:bluemix:public:iam::::role:Editor'.
         */
        role_id: string;
        /** The display name of the role. */
        display_name?: string;
        /** The description of the role. */
        description?: string;
    }
    /** The subject attribute values that must match in order for this policy to apply in a permission decision. */
    interface PolicySubject {
        /** List of subject attributes. */
        attributes?: SubjectAttribute[];
    }
    /** An attribute associated with a resource. */
    interface ResourceAttribute {
        /** The name of an attribute. */
        name: string;
        /** The value of an attribute. */
        value: string;
        /** The operator of an attribute. */
        operator?: string;
    }
    /** A tag associated with a resource. */
    interface ResourceTag {
        /** The name of an access management tag. */
        name: string;
        /** The value of an access management tag. */
        value: string;
        /** The operator of an access management tag. */
        operator?: string;
    }
    /** A role resource. */
    interface Role {
        /** The display name of the role that is shown in the console. */
        display_name?: string;
        /** The description of the role. */
        description?: string;
        /** The actions of the role. Please refer to [IAM roles and
         *  actions](https://cloud.ibm.com/docs/account?topic=account-iam-service-roles-actions).
         */
        actions?: string[];
        /** The role Cloud Resource Name (CRN). Example CRN:
         *  'crn:v1:ibmcloud:public:iam-access-management::a/exampleAccountId::customRole:ExampleRoleName'.
         */
        crn?: string;
    }
    /** A collection of roles returned by the 'list roles' operation. */
    interface RoleList {
        /** List of custom roles. */
        custom_roles?: CustomRole[];
        /** List of service roles. */
        service_roles?: Role[];
        /** List of system roles. */
        system_roles?: Role[];
    }
    /** An attribute associated with a subject. */
    interface SubjectAttribute {
        /** The name of an attribute. */
        name: string;
        /** The value of an attribute. */
        value: string;
    }
}
export = IamPolicyManagementV1;
