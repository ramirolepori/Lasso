/**
 * (C) Copyright IBM Corp. 2022.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import { BaseService, UserOptions } from 'ibm-cloud-sdk-core';
/**
 * The IAM Identity Service API allows for the management of Account Settings and Identities (Service IDs, ApiKeys).
 *
 * API Version: 1.0.0
 */
declare class IamIdentityV1 extends BaseService {
    static DEFAULT_SERVICE_URL: string;
    static DEFAULT_SERVICE_NAME: string;
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of IamIdentityV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {IamIdentityV1}
     */
    static newInstance(options: UserOptions): IamIdentityV1;
    /**
     * Construct a IamIdentityV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {IamIdentityV1}
     */
    constructor(options: UserOptions);
    /*************************
     * APIKeyOperations
     ************************/
    /**
     * Get API keys for a given service or user IAM ID and account ID.
     *
     * Returns the list of API key details for a given service or user IAM ID and account ID. Users can manage user API
     * keys for themself, or service ID API keys for service IDs that are bound to an entity they have access to. In case
     * of service IDs and their API keys, a user must be either an account owner, a IBM Cloud org manager or IBM Cloud
     * space developer in order to manage service IDs of the entity.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - Account ID of the API keys(s) to query. If a service IAM ID is specified in
     * iam_id then account_id must match the account of the IAM ID. If a user IAM ID is specified in iam_id then then
     * account_id must match the account of the Authorization token.
     * @param {string} [params.iamId] - IAM ID of the API key(s) to be queried. The IAM ID may be that of a user or a
     * service. For a user IAM ID iam_id must match the Authorization token.
     * @param {number} [params.pagesize] - Optional size of a single page. Default is 20 items per page. Valid range is 1
     * to 100.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {string} [params.scope] - Optional parameter to define the scope of the queried API Keys. Can be 'entity'
     * (default) or 'account'.
     * @param {string} [params.type] - Optional parameter to filter the type of the queried API Keys. Can be 'user' or
     * 'serviceid'.
     * @param {string} [params.sort] - Optional sort property, valid values are name, description, created_at and
     * created_by. If specified, the items are sorted by the value of this property.
     * @param {string} [params.order] - Optional sort order, valid values are asc and desc. Default: asc.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ApiKeyList>>}
     */
    listApiKeys(params?: IamIdentityV1.ListApiKeysParams): Promise<IamIdentityV1.Response<IamIdentityV1.ApiKeyList>>;
    /**
     * Create an API key.
     *
     * Creates an API key for a UserID or service ID. Users can manage user API keys for themself, or service ID API keys
     * for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - Name of the API key. The name is not checked for uniqueness. Therefore multiple names
     * with the same value can exist. Access is done via the UUID of the API key.
     * @param {string} params.iamId - The iam_id that this API key authenticates.
     * @param {string} [params.description] - The optional description of the API key. The 'description' property is only
     * available if a description was provided during a create of an API key.
     * @param {string} [params.accountId] - The account ID of the API key.
     * @param {string} [params.apikey] - You can optionally passthrough the API key value for this API key. If passed, NO
     * validation of that apiKey value is done, i.e. the value can be non-URL safe. If omitted, the API key management
     * will create an URL safe opaque API key value. The value of the API key is checked for uniqueness. Please ensure
     * enough variations when passing in this value.
     * @param {boolean} [params.storeValue] - Send true or false to set whether the API key value is retrievable in the
     * future by using the Get details of an API key request. If you create an API key for a user, you must specify
     * `false` or omit the value. We don't allow storing of API keys for users.
     * @param {string} [params.entityLock] - Indicates if the API key is locked for further write operations. False by
     * default.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>}
     */
    createApiKey(params: IamIdentityV1.CreateApiKeyParams): Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>;
    /**
     * Get details of an API key by its value.
     *
     * Returns the details of an API key by its value. Users can manage user API keys for themself, or service ID API keys
     * for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.iamApiKey] - API key value.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>}
     */
    getApiKeysDetails(params?: IamIdentityV1.GetApiKeysDetailsParams): Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>;
    /**
     * Get details of an API key.
     *
     * Returns the details of an API key. Users can manage user API keys for themself, or service ID API keys for service
     * IDs that are bound to an entity they have access to. In case of service IDs and their API keys, a user must be
     * either an account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the
     * entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the API key.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {boolean} [params.includeActivity] - Defines if the entity's activity is included in the response.
     * Retrieving activity data is an expensive operation, so please only request this when needed.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>}
     */
    getApiKey(params: IamIdentityV1.GetApiKeyParams): Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>;
    /**
     * Updates an API key.
     *
     * Updates properties of an API key. This does NOT affect existing access tokens. Their token content will stay
     * unchanged until the access token is refreshed. To update an API key, pass the property to be modified. To delete
     * one property's value, pass the property with an empty value "".Users can manage user API keys for themself, or
     * service ID API keys for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the API key to be updated.
     * @param {string} params.ifMatch - Version of the API key to be updated. Specify the version that you retrieved when
     * reading the API key. This value helps identifying parallel usage of this API. Pass * to indicate to update any
     * version available. This might result in stale updates.
     * @param {string} [params.name] - The name of the API key to update. If specified in the request the parameter must
     * not be empty. The name is not checked for uniqueness. Failure to this will result in an Error condition.
     * @param {string} [params.description] - The description of the API key to update. If specified an empty description
     * will clear the description of the API key. If a non empty value is provided the API key will be updated.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>}
     */
    updateApiKey(params: IamIdentityV1.UpdateApiKeyParams): Promise<IamIdentityV1.Response<IamIdentityV1.ApiKey>>;
    /**
     * Deletes an API key.
     *
     * Deletes an API key. Existing tokens will remain valid until expired. Users can manage user API keys for themself,
     * or service ID API keys for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the API key.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    deleteApiKey(params: IamIdentityV1.DeleteApiKeyParams): Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>;
    /**
     * Lock the API key.
     *
     * Locks an API key by ID. Users can manage user API keys for themself, or service ID API keys for service IDs that
     * are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an
     * account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the API key.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    lockApiKey(params: IamIdentityV1.LockApiKeyParams): Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>;
    /**
     * Unlock the API key.
     *
     * Unlocks an API key by ID. Users can manage user API keys for themself, or service ID API keys for service IDs that
     * are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an
     * account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the API key.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    unlockApiKey(params: IamIdentityV1.UnlockApiKeyParams): Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>;
    /*************************
     * serviceIDOperations
     ************************/
    /**
     * List service IDs.
     *
     * Returns a list of service IDs. Users can manage user API keys for themself, or service ID API keys for service IDs
     * that are bound to an entity they have access to. Note: apikey details are only included in the response when
     * creating a Service ID with an api key.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - Account ID of the service ID(s) to query. This parameter is required (unless
     * using a pagetoken).
     * @param {string} [params.name] - Name of the service ID(s) to query. Optional.20 items per page. Valid range is 1 to
     * 100.
     * @param {number} [params.pagesize] - Optional size of a single page. Default is 20 items per page. Valid range is 1
     * to 100.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {string} [params.sort] - Optional sort property, valid values are name, description, created_at and
     * modified_at. If specified, the items are sorted by the value of this property.
     * @param {string} [params.order] - Optional sort order, valid values are asc and desc. Default: asc.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ServiceIdList>>}
     */
    listServiceIds(params?: IamIdentityV1.ListServiceIdsParams): Promise<IamIdentityV1.Response<IamIdentityV1.ServiceIdList>>;
    /**
     * Create a service ID.
     *
     * Creates a service ID for an IBM Cloud account. Users can manage user API keys for themself, or service ID API keys
     * for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - ID of the account the service ID belongs to.
     * @param {string} params.name - Name of the Service Id. The name is not checked for uniqueness. Therefore multiple
     * names with the same value can exist. Access is done via the UUID of the Service Id.
     * @param {string} [params.description] - The optional description of the Service Id. The 'description' property is
     * only available if a description was provided during a create of a Service Id.
     * @param {string[]} [params.uniqueInstanceCrns] - Optional list of CRNs (string array) which point to the services
     * connected to the service ID.
     * @param {ApiKeyInsideCreateServiceIdRequest} [params.apikey] - Parameters for the API key in the Create service Id
     * V1 REST request.
     * @param {string} [params.entityLock] - Indicates if the service ID is locked for further write operations. False by
     * default.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ServiceId>>}
     */
    createServiceId(params: IamIdentityV1.CreateServiceIdParams): Promise<IamIdentityV1.Response<IamIdentityV1.ServiceId>>;
    /**
     * Get details of a service ID.
     *
     * Returns the details of a service ID. Users can manage user API keys for themself, or service ID API keys for
     * service IDs that are bound to an entity they have access to. Note: apikey details are only included in the response
     * when creating a Service ID with an apikey.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the service ID.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {boolean} [params.includeActivity] - Defines if the entity's activity is included in the response.
     * Retrieving activity data is an expensive operation, so please only request this when needed.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ServiceId>>}
     */
    getServiceId(params: IamIdentityV1.GetServiceIdParams): Promise<IamIdentityV1.Response<IamIdentityV1.ServiceId>>;
    /**
     * Update service ID.
     *
     * Updates properties of a service ID. This does NOT affect existing access tokens. Their token content will stay
     * unchanged until the access token is refreshed. To update a service ID, pass the property to be modified. To delete
     * one property's value, pass the property with an empty value "".Users can manage user API keys for themself, or
     * service ID API keys for service IDs that are bound to an entity they have access to. Note: apikey details are only
     * included in the response when creating a Service ID with an apikey.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the service ID to be updated.
     * @param {string} params.ifMatch - Version of the service ID to be updated. Specify the version that you retrieved as
     * entity_tag (ETag header) when reading the service ID. This value helps identifying parallel usage of this API. Pass
     * * to indicate to update any version available. This might result in stale updates.
     * @param {string} [params.name] - The name of the service ID to update. If specified in the request the parameter
     * must not be empty. The name is not checked for uniqueness. Failure to this will result in an Error condition.
     * @param {string} [params.description] - The description of the service ID to update. If specified an empty
     * description will clear the description of the service ID. If an non empty value is provided the service ID will be
     * updated.
     * @param {string[]} [params.uniqueInstanceCrns] - List of CRNs which point to the services connected to this service
     * ID. If specified an empty list will clear all existing unique instance crns of the service ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ServiceId>>}
     */
    updateServiceId(params: IamIdentityV1.UpdateServiceIdParams): Promise<IamIdentityV1.Response<IamIdentityV1.ServiceId>>;
    /**
     * Deletes a service ID and associated API keys.
     *
     * Deletes a service ID and all API keys associated to it. Before deleting the service ID, all associated API keys are
     * deleted. In case a Delete Conflict (status code 409) a retry of the request may help as the service ID is only
     * deleted if the associated API keys were successfully deleted before. Users can manage user API keys for themself,
     * or service ID API keys for service IDs that are bound to an entity they have access to.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the service ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    deleteServiceId(params: IamIdentityV1.DeleteServiceIdParams): Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>;
    /**
     * Lock the service ID.
     *
     * Locks a service ID by ID. Users can manage user API keys for themself, or service ID API keys for service IDs that
     * are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either an
     * account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the service ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    lockServiceId(params: IamIdentityV1.LockServiceIdParams): Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>;
    /**
     * Unlock the service ID.
     *
     * Unlocks a service ID by ID. Users can manage user API keys for themself, or service ID API keys for service IDs
     * that are bound to an entity they have access to. In case of service IDs and their API keys, a user must be either
     * an account owner, a IBM Cloud org manager or IBM Cloud space developer in order to manage service IDs of the
     * entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.id - Unique ID of the service ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    unlockServiceId(params: IamIdentityV1.UnlockServiceIdParams): Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>;
    /*************************
     * trustedProfilesOperations
     ************************/
    /**
     * Create a trusted profile.
     *
     * Create a trusted profile for a given account ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - Name of the trusted profile. The name is checked for uniqueness. Therefore trusted
     * profiles with the same names can not exist in the same account.
     * @param {string} params.accountId - The account ID of the trusted profile.
     * @param {string} [params.description] - The optional description of the trusted profile. The 'description' property
     * is only available if a description was provided during creation of trusted profile.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfile>>}
     */
    createProfile(params: IamIdentityV1.CreateProfileParams): Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfile>>;
    /**
     * List trusted profiles.
     *
     * List the trusted profiles in an account. The `account_id` query parameter determines the account from which to
     * retrieve the list of trusted profiles.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Account ID to query for trusted profiles.
     * @param {string} [params.name] - Name of the trusted profile to query.
     * @param {number} [params.pagesize] - Optional size of a single page. Default is 20 items per page. Valid range is 1
     * to 100.
     * @param {string} [params.sort] - Optional sort property, valid values are name, description, created_at and
     * modified_at. If specified, the items are sorted by the value of this property.
     * @param {string} [params.order] - Optional sort order, valid values are asc and desc. Default: asc.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {string} [params.pagetoken] - Optional Prev or Next page token returned from a previous query execution.
     * Default is start with first page.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfilesList>>}
     */
    listProfiles(params: IamIdentityV1.ListProfilesParams): Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfilesList>>;
    /**
     * Get a trusted profile.
     *
     * Retrieve a trusted profile by its `profile-id`. Only the trusted profile's data is returned (`name`, `description`,
     * `iam_id`, etc.), not the federated users or compute resources that qualify to apply the trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile to get.
     * @param {boolean} [params.includeActivity] - Defines if the entity's activity is included in the response.
     * Retrieving activity data is an expensive operation, so please only request this when needed.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfile>>}
     */
    getProfile(params: IamIdentityV1.GetProfileParams): Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfile>>;
    /**
     * Update a trusted profile.
     *
     * Update the name or description of an existing trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile to be updated.
     * @param {string} params.ifMatch - Version of the trusted profile to be updated. Specify the version that you
     * retrived when reading list of trusted profiles. This value helps to identify any parallel usage of trusted profile.
     * Pass * to indicate to update any version available. This might result in stale updates.
     * @param {string} [params.name] - The name of the trusted profile to update. If specified in the request the
     * parameter must not be empty. The name is checked for uniqueness. Failure to this will result in an Error condition.
     * @param {string} [params.description] - The description of the trusted profile to update. If specified an empty
     * description will clear the description of the trusted profile. If a non empty value is provided the trusted profile
     * will be updated.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfile>>}
     */
    updateProfile(params: IamIdentityV1.UpdateProfileParams): Promise<IamIdentityV1.Response<IamIdentityV1.TrustedProfile>>;
    /**
     * Delete a trusted profile.
     *
     * Delete a trusted profile. When you delete trusted profile, compute resources and federated users are unlinked from
     * the profile and can no longer apply the trusted profile identity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    deleteProfile(params: IamIdentityV1.DeleteProfileParams): Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>;
    /**
     * Create claim rule for a trusted profile.
     *
     * Create a claim rule for a trusted profile. There is a limit of 20 rules per trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile to create a claim rule.
     * @param {string} params.type - Type of the claim rule, either 'Profile-SAML' or 'Profile-CR'.
     * @param {ProfileClaimRuleConditions[]} params.conditions - Conditions of this claim rule.
     * @param {ResponseContext} [params.context] - Context with key properties for problem determination.
     * @param {string} [params.name] - Name of the claim rule to be created or updated.
     * @param {string} [params.realmName] - The realm name of the Idp this claim rule applies to. This field is required
     * only if the type is specified as 'Profile-SAML'.
     * @param {string} [params.crType] - The compute resource type the rule applies to, required only if type is specified
     * as 'Profile-CR'. Valid values are VSI, IKS_SA, ROKS_SA.
     * @param {number} [params.expiration] - Session expiration in seconds, only required if type is 'Profile-SAML'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRule>>}
     */
    createClaimRule(params: IamIdentityV1.CreateClaimRuleParams): Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRule>>;
    /**
     * List claim rules for a trusted profile.
     *
     * Get a list of all claim rules for a trusted profile. The `profile-id` query parameter determines the profile from
     * which to retrieve the list of claim rules.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRuleList>>}
     */
    listClaimRules(params: IamIdentityV1.ListClaimRulesParams): Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRuleList>>;
    /**
     * Get a claim rule for a trusted profile.
     *
     * A specific claim rule can be fetched for a given trusted profile ID and rule ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.ruleId - ID of the claim rule to get.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRule>>}
     */
    getClaimRule(params: IamIdentityV1.GetClaimRuleParams): Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRule>>;
    /**
     * Update claim rule for a trusted profile.
     *
     * Update a specific claim rule for a given trusted profile ID and rule ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.ruleId - ID of the claim rule to update.
     * @param {string} params.ifMatch - Version of the claim rule to be updated. Specify the version that you retrived
     * when reading list of claim rules. This value helps to identify any parallel usage of claim rule. Pass * to indicate
     * to update any version available. This might result in stale updates.
     * @param {string} params.type - Type of the claim rule, either 'Profile-SAML' or 'Profile-CR'.
     * @param {ProfileClaimRuleConditions[]} params.conditions - Conditions of this claim rule.
     * @param {ResponseContext} [params.context] - Context with key properties for problem determination.
     * @param {string} [params.name] - Name of the claim rule to be created or updated.
     * @param {string} [params.realmName] - The realm name of the Idp this claim rule applies to. This field is required
     * only if the type is specified as 'Profile-SAML'.
     * @param {string} [params.crType] - The compute resource type the rule applies to, required only if type is specified
     * as 'Profile-CR'. Valid values are VSI, IKS_SA, ROKS_SA.
     * @param {number} [params.expiration] - Session expiration in seconds, only required if type is 'Profile-SAML'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRule>>}
     */
    updateClaimRule(params: IamIdentityV1.UpdateClaimRuleParams): Promise<IamIdentityV1.Response<IamIdentityV1.ProfileClaimRule>>;
    /**
     * Delete a claim rule.
     *
     * Delete a claim rule. When you delete a claim rule, federated user or compute resources are no longer required to
     * meet the conditions of the claim rule in order to apply the trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.ruleId - ID of the claim rule to delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    deleteClaimRule(params: IamIdentityV1.DeleteClaimRuleParams): Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>;
    /**
     * Create link to a trusted profile.
     *
     * Create a direct link between a specific compute resource and a trusted profile, rather than creating conditions
     * that a compute resource must fulfill to apply a trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.crType - The compute resource type. Valid values are VSI, IKS_SA, ROKS_SA.
     * @param {CreateProfileLinkRequestLink} params.link - Link details.
     * @param {string} [params.name] - Optional name of the Link.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileLink>>}
     */
    createLink(params: IamIdentityV1.CreateLinkParams): Promise<IamIdentityV1.Response<IamIdentityV1.ProfileLink>>;
    /**
     * List links to a trusted profile.
     *
     * Get a list of links to a trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileLinkList>>}
     */
    listLinks(params: IamIdentityV1.ListLinksParams): Promise<IamIdentityV1.Response<IamIdentityV1.ProfileLinkList>>;
    /**
     * Get link to a trusted profile.
     *
     * Get a specific link to a trusted profile by `link_id`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.linkId - ID of the link.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ProfileLink>>}
     */
    getLink(params: IamIdentityV1.GetLinkParams): Promise<IamIdentityV1.Response<IamIdentityV1.ProfileLink>>;
    /**
     * Delete link to a trusted profile.
     *
     * Delete a link between a compute resource and a trusted profile.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.profileId - ID of the trusted profile.
     * @param {string} params.linkId - ID of the link.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>}
     */
    deleteLink(params: IamIdentityV1.DeleteLinkParams): Promise<IamIdentityV1.Response<IamIdentityV1.EmptyObject>>;
    /*************************
     * accountSettings
     ************************/
    /**
     * Get account configurations.
     *
     * Returns the details of an account's configuration.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - Unique ID of the account.
     * @param {boolean} [params.includeHistory] - Defines if the entity history is included in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsResponse>>}
     */
    getAccountSettings(params: IamIdentityV1.GetAccountSettingsParams): Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsResponse>>;
    /**
     * Update account configurations.
     *
     * Allows a user to configure settings on their account with regards to MFA, session lifetimes, access control for
     * creating new identities, and enforcing IP restrictions on token creation.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.ifMatch - Version of the account settings to be updated. Specify the version that you
     * retrieved as entity_tag (ETag header) when reading the account. This value helps identifying parallel usage of this
     * API. Pass * to indicate to update any version available. This might result in stale updates.
     * @param {string} params.accountId - The id of the account to update the settings for.
     * @param {string} [params.restrictCreateServiceId] - Defines whether or not creating a Service Id is access
     * controlled. Valid values:
     *   * RESTRICTED - to apply access control
     *   * NOT_RESTRICTED - to remove access control
     *   * NOT_SET - to unset a previously set value.
     * @param {string} [params.restrictCreatePlatformApikey] - Defines whether or not creating platform API keys is access
     * controlled. Valid values:
     *   * RESTRICTED - to apply access control
     *   * NOT_RESTRICTED - to remove access control
     *   * NOT_SET - to 'unset' a previous set value.
     * @param {string} [params.allowedIpAddresses] - Defines the IP addresses and subnets from which IAM tokens can be
     * created for the account.
     * @param {string} [params.mfa] - Defines the MFA trait for the account. Valid values:
     *   * NONE - No MFA trait set
     *   * TOTP - For all non-federated IBMId users
     *   * TOTP4ALL - For all users
     *   * LEVEL1 - Email-based MFA for all users
     *   * LEVEL2 - TOTP-based MFA for all users
     *   * LEVEL3 - U2F MFA for all users.
     * @param {AccountSettingsUserMFA[]} [params.userMfa] - List of users that are exempted from the MFA requirement of
     * the account.
     * @param {string} [params.sessionExpirationInSeconds] - Defines the session expiration in seconds for the account.
     * Valid values:
     *   * Any whole number between between '900' and '86400'
     *   * NOT_SET - To unset account setting and use service default.
     * @param {string} [params.sessionInvalidationInSeconds] - Defines the period of time in seconds in which a session
     * will be invalidated due to inactivity. Valid values:
     *   * Any whole number between '900' and '7200'
     *   * NOT_SET - To unset account setting and use service default.
     * @param {string} [params.maxSessionsPerIdentity] - Defines the max allowed sessions per identity required by the
     * account. Value values:
     *   * Any whole number greater than 0
     *   * NOT_SET - To unset account setting and use service default.
     * @param {string} [params.systemAccessTokenExpirationInSeconds] - Defines the access token expiration in seconds.
     * Valid values:
     *   * Any whole number between '900' and '3600'
     *   * NOT_SET - To unset account setting and use service default.
     * @param {string} [params.systemRefreshTokenExpirationInSeconds] - Defines the refresh token expiration in seconds.
     * Valid values:
     *   * Any whole number between '900' and '2592000'
     *   * NOT_SET - To unset account setting and use service default.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsResponse>>}
     */
    updateAccountSettings(params: IamIdentityV1.UpdateAccountSettingsParams): Promise<IamIdentityV1.Response<IamIdentityV1.AccountSettingsResponse>>;
    /*************************
     * activityOperations
     ************************/
    /**
     * Trigger activity report for the account.
     *
     * Trigger activity report for the account by specifying the account ID. It can take a few minutes to generate the
     * report for retrieval.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - ID of the account.
     * @param {string} [params.type] - Optional report type. The supported value is 'inactive'. List all identities that
     * have not authenticated within the time indicated by duration.
     * @param {string} [params.duration] - Optional duration of the report. The supported unit of duration is hours.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.ReportReference>>}
     */
    createReport(params: IamIdentityV1.CreateReportParams): Promise<IamIdentityV1.Response<IamIdentityV1.ReportReference>>;
    /**
     * Get activity report for the account.
     *
     * Get activity report for the account by specifying the account ID and the reference that is generated by triggering
     * the report. Reports older than a day are deleted when generating a new report.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.accountId - ID of the account.
     * @param {string} params.reference - Reference for the report to be generated, You can use 'latest' to get the latest
     * report for the given account.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<IamIdentityV1.Response<IamIdentityV1.Report>>}
     */
    getReport(params: IamIdentityV1.GetReportParams): Promise<IamIdentityV1.Response<IamIdentityV1.Report>>;
}
/*************************
 * interfaces
 ************************/
declare namespace IamIdentityV1 {
    /** An operation response. */
    interface Response<T = any> {
        result: T;
        status: number;
        statusText: string;
        headers: IncomingHttpHeaders;
    }
    /** The callback for a service request. */
    type Callback<T> = (error: any, response?: Response<T>) => void;
    /** The body of a service request that returns no response data. */
    interface EmptyObject {
    }
    /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
    interface JsonObject {
        [key: string]: any;
    }
    /*************************
     * request interfaces
     ************************/
    /** Parameters for the `listApiKeys` operation. */
    interface ListApiKeysParams {
        /** Account ID of the API keys(s) to query. If a service IAM ID is specified in iam_id then account_id must
         *  match the account of the IAM ID. If a user IAM ID is specified in iam_id then then account_id must match the
         *  account of the Authorization token.
         */
        accountId?: string;
        /** IAM ID of the API key(s) to be queried. The IAM ID may be that of a user or a service. For a user IAM ID
         *  iam_id must match the Authorization token.
         */
        iamId?: string;
        /** Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100. */
        pagesize?: number;
        /** Optional Prev or Next page token returned from a previous query execution. Default is start with first page. */
        pagetoken?: string;
        /** Optional parameter to define the scope of the queried API Keys. Can be 'entity' (default) or 'account'. */
        scope?: ListApiKeysConstants.Scope | string;
        /** Optional parameter to filter the type of the queried API Keys. Can be 'user' or 'serviceid'. */
        type?: ListApiKeysConstants.Type | string;
        /** Optional sort property, valid values are name, description, created_at and created_by. If specified, the
         *  items are sorted by the value of this property.
         */
        sort?: string;
        /** Optional sort order, valid values are asc and desc. Default: asc. */
        order?: ListApiKeysConstants.Order | string;
        /** Defines if the entity history is included in the response. */
        includeHistory?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `listApiKeys` operation. */
    namespace ListApiKeysConstants {
        /** Optional parameter to define the scope of the queried API Keys. Can be 'entity' (default) or 'account'. */
        enum Scope {
            ENTITY = "entity",
            ACCOUNT = "account"
        }
        /** Optional parameter to filter the type of the queried API Keys. Can be 'user' or 'serviceid'. */
        enum Type {
            USER = "user",
            SERVICEID = "serviceid"
        }
        /** Optional sort order, valid values are asc and desc. Default: asc. */
        enum Order {
            ASC = "asc",
            DESC = "desc"
        }
    }
    /** Parameters for the `createApiKey` operation. */
    interface CreateApiKeyParams {
        /** Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value
         *  can exist. Access is done via the UUID of the API key.
         */
        name: string;
        /** The iam_id that this API key authenticates. */
        iamId: string;
        /** The optional description of the API key. The 'description' property is only available if a description was
         *  provided during a create of an API key.
         */
        description?: string;
        /** The account ID of the API key. */
        accountId?: string;
        /** You can optionally passthrough the API key value for this API key. If passed, NO validation of that apiKey
         *  value is done, i.e. the value can be non-URL safe. If omitted, the API key management will create an URL safe
         *  opaque API key value. The value of the API key is checked for uniqueness. Please ensure enough variations when
         *  passing in this value.
         */
        apikey?: string;
        /** Send true or false to set whether the API key value is retrievable in the future by using the Get details of
         *  an API key request. If you create an API key for a user, you must specify `false` or omit the value. We don't
         *  allow storing of API keys for users.
         */
        storeValue?: boolean;
        /** Indicates if the API key is locked for further write operations. False by default. */
        entityLock?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getApiKeysDetails` operation. */
    interface GetApiKeysDetailsParams {
        /** API key value. */
        iamApiKey?: string;
        /** Defines if the entity history is included in the response. */
        includeHistory?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getApiKey` operation. */
    interface GetApiKeyParams {
        /** Unique ID of the API key. */
        id: string;
        /** Defines if the entity history is included in the response. */
        includeHistory?: boolean;
        /** Defines if the entity's activity is included in the response. Retrieving activity data is an expensive
         *  operation, so please only request this when needed.
         */
        includeActivity?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `updateApiKey` operation. */
    interface UpdateApiKeyParams {
        /** Unique ID of the API key to be updated. */
        id: string;
        /** Version of the API key to be updated. Specify the version that you retrieved when reading the API key. This
         *  value helps identifying parallel usage of this API. Pass * to indicate to update any version available. This
         *  might result in stale updates.
         */
        ifMatch: string;
        /** The name of the API key to update. If specified in the request the parameter must not be empty. The name is
         *  not checked for uniqueness. Failure to this will result in an Error condition.
         */
        name?: string;
        /** The description of the API key to update. If specified an empty description will clear the description of
         *  the API key. If a non empty value is provided the API key will be updated.
         */
        description?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteApiKey` operation. */
    interface DeleteApiKeyParams {
        /** Unique ID of the API key. */
        id: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `lockApiKey` operation. */
    interface LockApiKeyParams {
        /** Unique ID of the API key. */
        id: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `unlockApiKey` operation. */
    interface UnlockApiKeyParams {
        /** Unique ID of the API key. */
        id: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listServiceIds` operation. */
    interface ListServiceIdsParams {
        /** Account ID of the service ID(s) to query. This parameter is required (unless using a pagetoken). */
        accountId?: string;
        /** Name of the service ID(s) to query. Optional.20 items per page. Valid range is 1 to 100. */
        name?: string;
        /** Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100. */
        pagesize?: number;
        /** Optional Prev or Next page token returned from a previous query execution. Default is start with first page. */
        pagetoken?: string;
        /** Optional sort property, valid values are name, description, created_at and modified_at. If specified, the
         *  items are sorted by the value of this property.
         */
        sort?: string;
        /** Optional sort order, valid values are asc and desc. Default: asc. */
        order?: ListServiceIdsConstants.Order | string;
        /** Defines if the entity history is included in the response. */
        includeHistory?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `listServiceIds` operation. */
    namespace ListServiceIdsConstants {
        /** Optional sort order, valid values are asc and desc. Default: asc. */
        enum Order {
            ASC = "asc",
            DESC = "desc"
        }
    }
    /** Parameters for the `createServiceId` operation. */
    interface CreateServiceIdParams {
        /** ID of the account the service ID belongs to. */
        accountId: string;
        /** Name of the Service Id. The name is not checked for uniqueness. Therefore multiple names with the same value
         *  can exist. Access is done via the UUID of the Service Id.
         */
        name: string;
        /** The optional description of the Service Id. The 'description' property is only available if a description
         *  was provided during a create of a Service Id.
         */
        description?: string;
        /** Optional list of CRNs (string array) which point to the services connected to the service ID. */
        uniqueInstanceCrns?: string[];
        /** Parameters for the API key in the Create service Id V1 REST request. */
        apikey?: ApiKeyInsideCreateServiceIdRequest;
        /** Indicates if the service ID is locked for further write operations. False by default. */
        entityLock?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getServiceId` operation. */
    interface GetServiceIdParams {
        /** Unique ID of the service ID. */
        id: string;
        /** Defines if the entity history is included in the response. */
        includeHistory?: boolean;
        /** Defines if the entity's activity is included in the response. Retrieving activity data is an expensive
         *  operation, so please only request this when needed.
         */
        includeActivity?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `updateServiceId` operation. */
    interface UpdateServiceIdParams {
        /** Unique ID of the service ID to be updated. */
        id: string;
        /** Version of the service ID to be updated. Specify the version that you retrieved as entity_tag (ETag header)
         *  when reading the service ID. This value helps identifying parallel usage of this API. Pass * to indicate to
         *  update any version available. This might result in stale updates.
         */
        ifMatch: string;
        /** The name of the service ID to update. If specified in the request the parameter must not be empty. The name
         *  is not checked for uniqueness. Failure to this will result in an Error condition.
         */
        name?: string;
        /** The description of the service ID to update. If specified an empty description will clear the description of
         *  the service ID. If an non empty value is provided the service ID will be updated.
         */
        description?: string;
        /** List of CRNs which point to the services connected to this service ID. If specified an empty list will clear
         *  all existing unique instance crns of the service ID.
         */
        uniqueInstanceCrns?: string[];
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteServiceId` operation. */
    interface DeleteServiceIdParams {
        /** Unique ID of the service ID. */
        id: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `lockServiceId` operation. */
    interface LockServiceIdParams {
        /** Unique ID of the service ID. */
        id: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `unlockServiceId` operation. */
    interface UnlockServiceIdParams {
        /** Unique ID of the service ID. */
        id: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `createProfile` operation. */
    interface CreateProfileParams {
        /** Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same
         *  names can not exist in the same account.
         */
        name: string;
        /** The account ID of the trusted profile. */
        accountId: string;
        /** The optional description of the trusted profile. The 'description' property is only available if a
         *  description was provided during creation of trusted profile.
         */
        description?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listProfiles` operation. */
    interface ListProfilesParams {
        /** Account ID to query for trusted profiles. */
        accountId: string;
        /** Name of the trusted profile to query. */
        name?: string;
        /** Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100. */
        pagesize?: number;
        /** Optional sort property, valid values are name, description, created_at and modified_at. If specified, the
         *  items are sorted by the value of this property.
         */
        sort?: string;
        /** Optional sort order, valid values are asc and desc. Default: asc. */
        order?: ListProfilesConstants.Order | string;
        /** Defines if the entity history is included in the response. */
        includeHistory?: boolean;
        /** Optional Prev or Next page token returned from a previous query execution. Default is start with first page. */
        pagetoken?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `listProfiles` operation. */
    namespace ListProfilesConstants {
        /** Optional sort order, valid values are asc and desc. Default: asc. */
        enum Order {
            ASC = "asc",
            DESC = "desc"
        }
    }
    /** Parameters for the `getProfile` operation. */
    interface GetProfileParams {
        /** ID of the trusted profile to get. */
        profileId: string;
        /** Defines if the entity's activity is included in the response. Retrieving activity data is an expensive
         *  operation, so please only request this when needed.
         */
        includeActivity?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `updateProfile` operation. */
    interface UpdateProfileParams {
        /** ID of the trusted profile to be updated. */
        profileId: string;
        /** Version of the trusted profile to be updated. Specify the version that you retrived when reading list of
         *  trusted profiles. This value helps to identify any parallel usage of trusted profile. Pass * to indicate to
         *  update any version available. This might result in stale updates.
         */
        ifMatch: string;
        /** The name of the trusted profile to update. If specified in the request the parameter must not be empty. The
         *  name is checked for uniqueness. Failure to this will result in an Error condition.
         */
        name?: string;
        /** The description of the trusted profile to update. If specified an empty description will clear the
         *  description of the trusted profile. If a non empty value is provided the trusted profile will be updated.
         */
        description?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteProfile` operation. */
    interface DeleteProfileParams {
        /** ID of the trusted profile. */
        profileId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `createClaimRule` operation. */
    interface CreateClaimRuleParams {
        /** ID of the trusted profile to create a claim rule. */
        profileId: string;
        /** Type of the claim rule, either 'Profile-SAML' or 'Profile-CR'. */
        type: string;
        /** Conditions of this claim rule. */
        conditions: ProfileClaimRuleConditions[];
        /** Context with key properties for problem determination. */
        context?: ResponseContext;
        /** Name of the claim rule to be created or updated. */
        name?: string;
        /** The realm name of the Idp this claim rule applies to. This field is required only if the type is specified
         *  as 'Profile-SAML'.
         */
        realmName?: string;
        /** The compute resource type the rule applies to, required only if type is specified as 'Profile-CR'. Valid
         *  values are VSI, IKS_SA, ROKS_SA.
         */
        crType?: string;
        /** Session expiration in seconds, only required if type is 'Profile-SAML'. */
        expiration?: number;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listClaimRules` operation. */
    interface ListClaimRulesParams {
        /** ID of the trusted profile. */
        profileId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getClaimRule` operation. */
    interface GetClaimRuleParams {
        /** ID of the trusted profile. */
        profileId: string;
        /** ID of the claim rule to get. */
        ruleId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `updateClaimRule` operation. */
    interface UpdateClaimRuleParams {
        /** ID of the trusted profile. */
        profileId: string;
        /** ID of the claim rule to update. */
        ruleId: string;
        /** Version of the claim rule to be updated. Specify the version that you retrived when reading list of claim
         *  rules. This value helps to identify any parallel usage of claim rule. Pass * to indicate to update any version
         *  available. This might result in stale updates.
         */
        ifMatch: string;
        /** Type of the claim rule, either 'Profile-SAML' or 'Profile-CR'. */
        type: string;
        /** Conditions of this claim rule. */
        conditions: ProfileClaimRuleConditions[];
        /** Context with key properties for problem determination. */
        context?: ResponseContext;
        /** Name of the claim rule to be created or updated. */
        name?: string;
        /** The realm name of the Idp this claim rule applies to. This field is required only if the type is specified
         *  as 'Profile-SAML'.
         */
        realmName?: string;
        /** The compute resource type the rule applies to, required only if type is specified as 'Profile-CR'. Valid
         *  values are VSI, IKS_SA, ROKS_SA.
         */
        crType?: string;
        /** Session expiration in seconds, only required if type is 'Profile-SAML'. */
        expiration?: number;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteClaimRule` operation. */
    interface DeleteClaimRuleParams {
        /** ID of the trusted profile. */
        profileId: string;
        /** ID of the claim rule to delete. */
        ruleId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `createLink` operation. */
    interface CreateLinkParams {
        /** ID of the trusted profile. */
        profileId: string;
        /** The compute resource type. Valid values are VSI, IKS_SA, ROKS_SA. */
        crType: string;
        /** Link details. */
        link: CreateProfileLinkRequestLink;
        /** Optional name of the Link. */
        name?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listLinks` operation. */
    interface ListLinksParams {
        /** ID of the trusted profile. */
        profileId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getLink` operation. */
    interface GetLinkParams {
        /** ID of the trusted profile. */
        profileId: string;
        /** ID of the link. */
        linkId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteLink` operation. */
    interface DeleteLinkParams {
        /** ID of the trusted profile. */
        profileId: string;
        /** ID of the link. */
        linkId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getAccountSettings` operation. */
    interface GetAccountSettingsParams {
        /** Unique ID of the account. */
        accountId: string;
        /** Defines if the entity history is included in the response. */
        includeHistory?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `updateAccountSettings` operation. */
    interface UpdateAccountSettingsParams {
        /** Version of the account settings to be updated. Specify the version that you retrieved as entity_tag (ETag
         *  header) when reading the account. This value helps identifying parallel usage of this API. Pass * to indicate to
         *  update any version available. This might result in stale updates.
         */
        ifMatch: string;
        /** The id of the account to update the settings for. */
        accountId: string;
        /** Defines whether or not creating a Service Id is access controlled. Valid values:
         *    * RESTRICTED - to apply access control
         *    * NOT_RESTRICTED - to remove access control
         *    * NOT_SET - to unset a previously set value.
         */
        restrictCreateServiceId?: UpdateAccountSettingsConstants.RestrictCreateServiceId | string;
        /** Defines whether or not creating platform API keys is access controlled. Valid values:
         *    * RESTRICTED - to apply access control
         *    * NOT_RESTRICTED - to remove access control
         *    * NOT_SET - to 'unset' a previous set value.
         */
        restrictCreatePlatformApikey?: UpdateAccountSettingsConstants.RestrictCreatePlatformApikey | string;
        /** Defines the IP addresses and subnets from which IAM tokens can be created for the account. */
        allowedIpAddresses?: string;
        /** Defines the MFA trait for the account. Valid values:
         *    * NONE - No MFA trait set
         *    * TOTP - For all non-federated IBMId users
         *    * TOTP4ALL - For all users
         *    * LEVEL1 - Email-based MFA for all users
         *    * LEVEL2 - TOTP-based MFA for all users
         *    * LEVEL3 - U2F MFA for all users.
         */
        mfa?: UpdateAccountSettingsConstants.Mfa | string;
        /** List of users that are exempted from the MFA requirement of the account. */
        userMfa?: AccountSettingsUserMFA[];
        /** Defines the session expiration in seconds for the account. Valid values:
         *    * Any whole number between between '900' and '86400'
         *    * NOT_SET - To unset account setting and use service default.
         */
        sessionExpirationInSeconds?: string;
        /** Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid
         *  values:
         *    * Any whole number between '900' and '7200'
         *    * NOT_SET - To unset account setting and use service default.
         */
        sessionInvalidationInSeconds?: string;
        /** Defines the max allowed sessions per identity required by the account. Value values:
         *    * Any whole number greater than 0
         *    * NOT_SET - To unset account setting and use service default.
         */
        maxSessionsPerIdentity?: string;
        /** Defines the access token expiration in seconds. Valid values:
         *    * Any whole number between '900' and '3600'
         *    * NOT_SET - To unset account setting and use service default.
         */
        systemAccessTokenExpirationInSeconds?: string;
        /** Defines the refresh token expiration in seconds. Valid values:
         *    * Any whole number between '900' and '2592000'
         *    * NOT_SET - To unset account setting and use service default.
         */
        systemRefreshTokenExpirationInSeconds?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `updateAccountSettings` operation. */
    namespace UpdateAccountSettingsConstants {
        /** Defines whether or not creating a Service Id is access controlled. Valid values: * RESTRICTED - to apply access control * NOT_RESTRICTED - to remove access control * NOT_SET - to unset a previously set value. */
        enum RestrictCreateServiceId {
            RESTRICTED = "RESTRICTED",
            NOT_RESTRICTED = "NOT_RESTRICTED",
            NOT_SET = "NOT_SET"
        }
        /** Defines whether or not creating platform API keys is access controlled. Valid values: * RESTRICTED - to apply access control * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value. */
        enum RestrictCreatePlatformApikey {
            RESTRICTED = "RESTRICTED",
            NOT_RESTRICTED = "NOT_RESTRICTED",
            NOT_SET = "NOT_SET"
        }
        /** Defines the MFA trait for the account. Valid values: * NONE - No MFA trait set * TOTP - For all non-federated IBMId users * TOTP4ALL - For all users * LEVEL1 - Email-based MFA for all users * LEVEL2 - TOTP-based MFA for all users * LEVEL3 - U2F MFA for all users. */
        enum Mfa {
            NONE = "NONE",
            TOTP = "TOTP",
            TOTP4ALL = "TOTP4ALL",
            LEVEL1 = "LEVEL1",
            LEVEL2 = "LEVEL2",
            LEVEL3 = "LEVEL3"
        }
    }
    /** Parameters for the `createReport` operation. */
    interface CreateReportParams {
        /** ID of the account. */
        accountId: string;
        /** Optional report type. The supported value is 'inactive'. List all identities that have not authenticated
         *  within the time indicated by duration.
         */
        type?: string;
        /** Optional duration of the report. The supported unit of duration is hours. */
        duration?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getReport` operation. */
    interface GetReportParams {
        /** ID of the account. */
        accountId: string;
        /** Reference for the report to be generated, You can use 'latest' to get the latest report for the given
         *  account.
         */
        reference: string;
        headers?: OutgoingHttpHeaders;
    }
    /*************************
     * model interfaces
     ************************/
    /** Response body format for Account Settings REST requests. */
    interface AccountSettingsResponse {
        /** Context with key properties for problem determination. */
        context?: ResponseContext;
        /** Unique ID of the account. */
        account_id: string;
        /** Defines whether or not creating a Service Id is access controlled. Valid values:
         *    * RESTRICTED - to apply access control
         *    * NOT_RESTRICTED - to remove access control
         *    * NOT_SET - to 'unset' a previous set value.
         */
        restrict_create_service_id: string;
        /** Defines whether or not creating platform API keys is access controlled. Valid values:
         *    * RESTRICTED - to apply access control
         *    * NOT_RESTRICTED - to remove access control
         *    * NOT_SET - to 'unset' a previous set value.
         */
        restrict_create_platform_apikey: string;
        /** Defines the IP addresses and subnets from which IAM tokens can be created for the account. */
        allowed_ip_addresses: string;
        /** Version of the account settings. */
        entity_tag: string;
        /** Defines the MFA trait for the account. Valid values:
         *    * NONE - No MFA trait set
         *    * TOTP - For all non-federated IBMId users
         *    * TOTP4ALL - For all users
         *    * LEVEL1 - Email-based MFA for all users
         *    * LEVEL2 - TOTP-based MFA for all users
         *    * LEVEL3 - U2F MFA for all users.
         */
        mfa: string;
        /** List of users that are exempted from the MFA requirement of the account. */
        user_mfa: AccountSettingsUserMFA[];
        /** History of the Account Settings. */
        history?: EnityHistoryRecord[];
        /** Defines the session expiration in seconds for the account. Valid values:
         *    * Any whole number between between '900' and '86400'
         *    * NOT_SET - To unset account setting and use service default.
         */
        session_expiration_in_seconds: string;
        /** Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid
         *  values:
         *    * Any whole number between '900' and '7200'
         *    * NOT_SET - To unset account setting and use service default.
         */
        session_invalidation_in_seconds: string;
        /** Defines the max allowed sessions per identity required by the account. Valid values:
         *    * Any whole number greater than 0
         *    * NOT_SET - To unset account setting and use service default.
         */
        max_sessions_per_identity: string;
        /** Defines the access token expiration in seconds. Valid values:
         *    * Any whole number between '900' and '3600'
         *    * NOT_SET - To unset account setting and use service default.
         */
        system_access_token_expiration_in_seconds: string;
        /** Defines the refresh token expiration in seconds. Valid values:
         *    * Any whole number between '900' and '2592000'
         *    * NOT_SET - To unset account setting and use service default.
         */
        system_refresh_token_expiration_in_seconds: string;
    }
    /** AccountSettingsUserMFA. */
    interface AccountSettingsUserMFA {
        /** The iam_id of the user. */
        iam_id: string;
        /** Defines the MFA requirement for the user. Valid values:
         *    * NONE - No MFA trait set
         *    * TOTP - For all non-federated IBMId users
         *    * TOTP4ALL - For all users
         *    * LEVEL1 - Email-based MFA for all users
         *    * LEVEL2 - TOTP-based MFA for all users
         *    * LEVEL3 - U2F MFA for all users.
         */
        mfa: string;
    }
    /** Activity. */
    interface Activity {
        /** Time when the entity was last authenticated. */
        last_authn?: string;
        /** Authentication count, number of times the entity was authenticated. */
        authn_count: number;
    }
    /** Response body format for API key V1 REST requests. */
    interface ApiKey {
        /** Context with key properties for problem determination. */
        context?: ResponseContext;
        /** Unique identifier of this API Key. */
        id: string;
        /** Version of the API Key details object. You need to specify this value when updating the API key to avoid
         *  stale updates.
         */
        entity_tag?: string;
        /** Cloud Resource Name of the item. Example Cloud Resource Name:
         *  'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::apikey:1234-9012-5678'.
         */
        crn: string;
        /** The API key cannot be changed if set to true. */
        locked: boolean;
        /** If set contains a date time string of the creation date in ISO format. */
        created_at?: string;
        /** IAM ID of the user or service which created the API key. */
        created_by: string;
        /** If set contains a date time string of the last modification date in ISO format. */
        modified_at?: string;
        /** Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value
         *  can exist. Access is done via the UUID of the API key.
         */
        name: string;
        /** The optional description of the API key. The 'description' property is only available if a description was
         *  provided during a create of an API key.
         */
        description?: string;
        /** The iam_id that this API key authenticates. */
        iam_id: string;
        /** ID of the account that this API key authenticates for. */
        account_id: string;
        /** The API key value. This property only contains the API key value for the following cases: create an API key,
         *  update a service ID API key that stores the API key value as retrievable, or get a service ID API key that
         *  stores the API key value as retrievable. All other operations don't return the API key value, for example all
         *  user API key related operations, except for create, don't contain the API key value.
         */
        apikey: string;
        /** History of the API key. */
        history?: EnityHistoryRecord[];
        activity?: Activity;
    }
    /** Parameters for the API key in the Create service Id V1 REST request. */
    interface ApiKeyInsideCreateServiceIdRequest {
        /** Name of the API key. The name is not checked for uniqueness. Therefore multiple names with the same value
         *  can exist. Access is done via the UUID of the API key.
         */
        name: string;
        /** The optional description of the API key. The 'description' property is only available if a description was
         *  provided during a create of an API key.
         */
        description?: string;
        /** You can optionally passthrough the API key value for this API key. If passed, NO validation of that apiKey
         *  value is done, i.e. the value can be non-URL safe. If omitted, the API key management will create an URL safe
         *  opaque API key value. The value of the API key is checked for uniqueness. Please ensure enough variations when
         *  passing in this value.
         */
        apikey?: string;
        /** Send true or false to set whether the API key value is retrievable in the future by using the Get details of
         *  an API key request. If you create an API key for a user, you must specify `false` or omit the value. We don't
         *  allow storing of API keys for users.
         */
        store_value?: boolean;
    }
    /** Response body format for the List API keys V1 REST request. */
    interface ApiKeyList {
        /** Context with key properties for problem determination. */
        context?: ResponseContext;
        /** The offset of the current page. */
        offset?: number;
        /** Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100. */
        limit?: number;
        /** Link to the first page. */
        first?: string;
        /** Link to the previous available page. If 'previous' property is not part of the response no previous page is
         *  available.
         */
        previous?: string;
        /** Link to the next available page. If 'next' property is not part of the response no next page is available. */
        next?: string;
        /** List of API keys based on the query paramters and the page size. The apikeys array is always part of the
         *  response but might be empty depending on the query parameters values provided.
         */
        apikeys: ApiKey[];
    }
    /** Apikeys activity details. */
    interface ApikeyActivity {
        /** Unique id of the apikey. */
        id: string;
        /** Name provided during creation of the apikey. */
        name?: string;
        /** Type of the apikey. Supported values are `serviceid` and `user`. */
        type: string;
        /** serviceid details will be present if type is `serviceid`. */
        serviceid?: ApikeyActivityServiceid;
        /** user details will be present if type is `user`. */
        user?: ApikeyActivityUser;
        /** Time when the apikey was last authenticated. */
        last_authn?: string;
    }
    /** serviceid details will be present if type is `serviceid`. */
    interface ApikeyActivityServiceid {
        /** Unique identifier of this Service Id. */
        id?: string;
        /** Name provided during creation of the serviceid. */
        name?: string;
    }
    /** user details will be present if type is `user`. */
    interface ApikeyActivityUser {
        /** IAMid of the user. */
        iam_id?: string;
        /** Name of the user. */
        name?: string;
        /** Username of the user. */
        username?: string;
        /** Email of the user. */
        email?: string;
    }
    /** Link details. */
    interface CreateProfileLinkRequestLink {
        /** The CRN of the compute resource. */
        crn: string;
        /** The compute resource namespace, only required if cr_type is IKS_SA or ROKS_SA. */
        namespace: string;
        /** Name of the compute resource, only required if cr_type is IKS_SA or ROKS_SA. */
        name?: string;
    }
    /** Response body format for an entity history record. */
    interface EnityHistoryRecord {
        /** Timestamp when the action was triggered. */
        timestamp: string;
        /** IAM ID of the identity which triggered the action. */
        iam_id: string;
        /** Account of the identity which triggered the action. */
        iam_id_account: string;
        /** Action of the history entry. */
        action: string;
        /** Params of the history entry. */
        params: string[];
        /** Message which summarizes the executed action. */
        message: string;
    }
    /** EntityActivity. */
    interface EntityActivity {
        /** Unique id of the entity. */
        id: string;
        /** Name provided during creation of the entity. */
        name?: string;
        /** Time when the entity was last authenticated. */
        last_authn?: string;
    }
    /** ProfileClaimRule. */
    interface ProfileClaimRule {
        /** the unique identifier of the claim rule. */
        id: string;
        /** version of the claim rule. */
        entity_tag: string;
        /** If set contains a date time string of the creation date in ISO format. */
        created_at: string;
        /** If set contains a date time string of the last modification date in ISO format. */
        modified_at?: string;
        /** The optional claim rule name. */
        name?: string;
        /** Type of the claim rule, either 'Profile-SAML' or 'Profile-CR'. */
        type: string;
        /** The realm name of the Idp this claim rule applies to. */
        realm_name?: string;
        /** Session expiration in seconds. */
        expiration: number;
        /** The compute resource type. Not required if type is Profile-SAML. Valid values are VSI, IKS_SA, ROKS_SA. */
        cr_type?: string;
        /** Conditions of this claim rule. */
        conditions: ProfileClaimRuleConditions[];
    }
    /** ProfileClaimRuleConditions. */
    interface ProfileClaimRuleConditions {
        /** The claim to evaluate against. [Learn
         *  more](/docs/account?topic=account-iam-condition-properties&interface=ui#cr-attribute-names).
         */
        claim: string;
        /** The operation to perform on the claim. valid values are EQUALS, NOT_EQUALS, EQUALS_IGNORE_CASE,
         *  NOT_EQUALS_IGNORE_CASE, CONTAINS, IN.
         */
        operator: string;
        /** The stringified JSON value that the claim is compared to using the operator. */
        value: string;
    }
    /** ProfileClaimRuleList. */
    interface ProfileClaimRuleList {
        /** Context with key properties for problem determination. */
        context?: ResponseContext;
        /** List of claim rules. */
        rules: ProfileClaimRule[];
    }
    /** Link details. */
    interface ProfileLink {
        /** the unique identifier of the claim rule. */
        id: string;
        /** version of the claim rule. */
        entity_tag: string;
        /** If set contains a date time string of the creation date in ISO format. */
        created_at: string;
        /** If set contains a date time string of the last modification date in ISO format. */
        modified_at: string;
        /** Optional name of the Link. */
        name?: string;
        /** The compute resource type. Valid values are VSI, IKS_SA, ROKS_SA. */
        cr_type: string;
        link: ProfileLinkLink;
    }
    /** ProfileLinkLink. */
    interface ProfileLinkLink {
        /** The CRN of the compute resource. */
        crn?: string;
        /** The compute resource namespace, only required if cr_type is IKS_SA or ROKS_SA. */
        namespace?: string;
        /** Name of the compute resource, only required if cr_type is IKS_SA or ROKS_SA. */
        name?: string;
    }
    /** ProfileLinkList. */
    interface ProfileLinkList {
        /** List of links to a trusted profile. */
        links: ProfileLink[];
    }
    /** Report. */
    interface Report {
        /** IAMid of the user who triggered the report. */
        created_by: string;
        /** Unique reference used to generate the report. */
        reference: string;
        /** Duration in hours for which the report is generated. */
        report_duration: string;
        /** Start time of the report. */
        report_start_time: string;
        /** End time of the report. */
        report_end_time: string;
        /** List of users. */
        users?: UserActivity[];
        /** List of apikeys. */
        apikeys?: ApikeyActivity[];
        /** List of serviceids. */
        serviceids?: EntityActivity[];
        /** List of profiles. */
        profiles?: EntityActivity[];
    }
    /** ReportReference. */
    interface ReportReference {
        /** Reference for the report to be generated. */
        reference: string;
    }
    /** Context with key properties for problem determination. */
    interface ResponseContext {
        /** The transaction ID of the inbound REST request. */
        transaction_id?: string;
        /** The operation of the inbound REST request. */
        operation?: string;
        /** The user agent of the inbound REST request. */
        user_agent?: string;
        /** The URL of that cluster. */
        url?: string;
        /** The instance ID of the server instance processing the request. */
        instance_id?: string;
        /** The thread ID of the server instance processing the request. */
        thread_id?: string;
        /** The host of the server instance processing the request. */
        host?: string;
        /** The start time of the request. */
        start_time?: string;
        /** The finish time of the request. */
        end_time?: string;
        /** The elapsed time in msec. */
        elapsed_time?: string;
        /** The cluster name. */
        cluster_name?: string;
    }
    /** Response body format for service ID V1 REST requests. */
    interface ServiceId {
        /** Context with key properties for problem determination. */
        context?: ResponseContext;
        /** Unique identifier of this Service Id. */
        id: string;
        /** Cloud wide identifier for identities of this service ID. */
        iam_id: string;
        /** Version of the service ID details object. You need to specify this value when updating the service ID to
         *  avoid stale updates.
         */
        entity_tag: string;
        /** Cloud Resource Name of the item. Example Cloud Resource Name:
         *  'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::serviceid:1234-5678-9012'.
         */
        crn: string;
        /** The service ID cannot be changed if set to true. */
        locked: boolean;
        /** If set contains a date time string of the creation date in ISO format. */
        created_at: string;
        /** If set contains a date time string of the last modification date in ISO format. */
        modified_at: string;
        /** ID of the account the service ID belongs to. */
        account_id: string;
        /** Name of the Service Id. The name is not checked for uniqueness. Therefore multiple names with the same value
         *  can exist. Access is done via the UUID of the Service Id.
         */
        name: string;
        /** The optional description of the Service Id. The 'description' property is only available if a description
         *  was provided during a create of a Service Id.
         */
        description?: string;
        /** Optional list of CRNs (string array) which point to the services connected to the service ID. */
        unique_instance_crns?: string[];
        /** History of the Service ID. */
        history?: EnityHistoryRecord[];
        /** Response body format for API key V1 REST requests. */
        apikey?: ApiKey;
        activity?: Activity;
    }
    /** Response body format for the list service ID V1 REST request. */
    interface ServiceIdList {
        /** Context with key properties for problem determination. */
        context?: ResponseContext;
        /** The offset of the current page. */
        offset?: number;
        /** Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100. */
        limit?: number;
        /** Link to the first page. */
        first?: string;
        /** Link to the previous available page. If 'previous' property is not part of the response no previous page is
         *  available.
         */
        previous?: string;
        /** Link to the next available page. If 'next' property is not part of the response no next page is available. */
        next?: string;
        /** List of service IDs based on the query paramters and the page size. The service IDs array is always part of
         *  the response but might be empty depending on the query parameter values provided.
         */
        serviceids: ServiceId[];
    }
    /** Response body format for trusted profile V1 REST requests. */
    interface TrustedProfile {
        /** Context with key properties for problem determination. */
        context?: ResponseContext;
        /** the unique identifier of the trusted profile. Example:'Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'. */
        id: string;
        /** Version of the trusted profile details object. You need to specify this value when updating the trusted
         *  profile to avoid stale updates.
         */
        entity_tag: string;
        /** Cloud Resource Name of the item. Example Cloud Resource Name:
         *  'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::profile:Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'.
         */
        crn: string;
        /** Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same
         *  names can not exist in the same account.
         */
        name: string;
        /** The optional description of the trusted profile. The 'description' property is only available if a
         *  description was provided during a create of a trusted profile.
         */
        description?: string;
        /** If set contains a date time string of the creation date in ISO format. */
        created_at?: string;
        /** If set contains a date time string of the last modification date in ISO format. */
        modified_at?: string;
        /** The iam_id of this trusted profile. */
        iam_id: string;
        /** ID of the account that this trusted profile belong to. */
        account_id: string;
        /** IMS acount ID of the trusted profile. */
        ims_account_id?: number;
        /** IMS user ID of the trusted profile. */
        ims_user_id?: number;
        /** History of the trusted profile. */
        history?: EnityHistoryRecord[];
        activity?: Activity;
    }
    /** Response body format for the List trusted profiles V1 REST request. */
    interface TrustedProfilesList {
        /** Context with key properties for problem determination. */
        context?: ResponseContext;
        /** The offset of the current page. */
        offset?: number;
        /** Optional size of a single page. Default is 20 items per page. Valid range is 1 to 100. */
        limit?: number;
        /** Link to the first page. */
        first?: string;
        /** Link to the previous available page. If 'previous' property is not part of the response no previous page is
         *  available.
         */
        previous?: string;
        /** Link to the next available page. If 'next' property is not part of the response no next page is available. */
        next?: string;
        /** List of trusted profiles. */
        profiles: TrustedProfile[];
    }
    /** UserActivity. */
    interface UserActivity {
        /** IAMid of the user. */
        iam_id: string;
        /** Name of the user. */
        name?: string;
        /** Username of the user. */
        username: string;
        /** Email of the user. */
        email?: string;
        /** Time when the user was last authenticated. */
        last_authn?: string;
    }
}
export = IamIdentityV1;
