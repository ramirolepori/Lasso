"use strict";
/**
 * (C) Copyright IBM Corp. 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-629bbb97-20201207-171303
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * Billing units for IBM Cloud enterprises
 */
var EnterpriseBillingUnitsV1 = /** @class */ (function (_super) {
    __extends(EnterpriseBillingUnitsV1, _super);
    /**
     * Construct a EnterpriseBillingUnitsV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {EnterpriseBillingUnitsV1}
     */
    function EnterpriseBillingUnitsV1(options) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(EnterpriseBillingUnitsV1.DEFAULT_SERVICE_URL);
        }
        return _this;
    }
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of EnterpriseBillingUnitsV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {EnterpriseBillingUnitsV1}
     */
    EnterpriseBillingUnitsV1.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = (0, ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment)(options.serviceName);
        }
        var service = new EnterpriseBillingUnitsV1(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * billingUnits
     ************************/
    /**
     * Get billing unit by ID.
     *
     * Return the billing unit information if it exists.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.billingUnitId - The ID of the requested billing unit.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<EnterpriseBillingUnitsV1.Response<EnterpriseBillingUnitsV1.BillingUnit>>}
     */
    EnterpriseBillingUnitsV1.prototype.getBillingUnit = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['billingUnitId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'billing_unit_id': _params.billingUnitId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(EnterpriseBillingUnitsV1.DEFAULT_SERVICE_NAME, 'v1', 'getBillingUnit');
        var parameters = {
            options: {
                url: '/v1/billing-units/{billing_unit_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List billing units.
     *
     * Return matching billing unit information if any exists. Omits internal properties and enterprise account ID from
     * the billing unit.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.accountId] - The enterprise account ID.
     * @param {string} [params.enterpriseId] - The enterprise ID.
     * @param {string} [params.accountGroupId] - The account group ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<EnterpriseBillingUnitsV1.Response<EnterpriseBillingUnitsV1.BillingUnitsList>>}
     */
    EnterpriseBillingUnitsV1.prototype.listBillingUnits = function (params) {
        var _params = __assign({}, params);
        var query = {
            'account_id': _params.accountId,
            'enterprise_id': _params.enterpriseId,
            'account_group_id': _params.accountGroupId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(EnterpriseBillingUnitsV1.DEFAULT_SERVICE_NAME, 'v1', 'listBillingUnits');
        var parameters = {
            options: {
                url: '/v1/billing-units',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * billingOptions
     ************************/
    /**
     * List billing options.
     *
     * Return matching billing options if any exist. Show subscriptions and promotional offers that are available to a
     * billing unit.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.billingUnitId - The billing unit ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<EnterpriseBillingUnitsV1.Response<EnterpriseBillingUnitsV1.BillingOptionsList>>}
     */
    EnterpriseBillingUnitsV1.prototype.listBillingOptions = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['billingUnitId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'billing_unit_id': _params.billingUnitId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(EnterpriseBillingUnitsV1.DEFAULT_SERVICE_NAME, 'v1', 'listBillingOptions');
        var parameters = {
            options: {
                url: '/v1/billing-options',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * creditPools
     ************************/
    /**
     * Get credit pools.
     *
     * Get credit pools for a billing unit. Credit pools can be either platform or support credit pools. The platform
     * credit pool contains credit from platform subscriptions and promotional offers. The support credit pool contains
     * credit from support subscriptions.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.billingUnitId - The ID of the billing unit.
     * @param {string} [params.date] - The date in the format of YYYY-MM.
     * @param {string} [params.type] - Filters the credit pool by type, either `PLATFORM` or `SUPPORT`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<EnterpriseBillingUnitsV1.Response<EnterpriseBillingUnitsV1.CreditPoolsList>>}
     */
    EnterpriseBillingUnitsV1.prototype.getCreditPools = function (params) {
        var _params = __assign({}, params);
        var requiredParams = ['billingUnitId'];
        var missingParams = (0, ibm_cloud_sdk_core_1.getMissingParams)(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'billing_unit_id': _params.billingUnitId,
            'date': _params.date,
            'type': _params.type,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(EnterpriseBillingUnitsV1.DEFAULT_SERVICE_NAME, 'v1', 'getCreditPools');
        var parameters = {
            options: {
                url: '/v1/credit-pools',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    EnterpriseBillingUnitsV1.DEFAULT_SERVICE_URL = 'https://billing.cloud.ibm.com';
    EnterpriseBillingUnitsV1.DEFAULT_SERVICE_NAME = 'enterprise_billing_units';
    return EnterpriseBillingUnitsV1;
}(ibm_cloud_sdk_core_1.BaseService));
module.exports = EnterpriseBillingUnitsV1;
//# sourceMappingURL=v1.js.map