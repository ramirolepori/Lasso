[{"id":"34c9f9b8dfea7642","type":"tab","label":"GeneradorDatosMock","disabled":false,"info":"","env":[]},{"id":"b1ac06542da0d53a","type":"tab","label":"DataEngine","disabled":false,"info":"","env":[]},{"id":"c55edf5e987e3807","type":"tab","label":"Cloud Object Storage","disabled":false,"info":"","env":[]},{"id":"785a0a21106c29bb","type":"tab","label":"Flow 1","disabled":false,"info":"","env":[]},{"id":"030f77e102944776","type":"mqtt-broker","name":"VM eMozart","broker":"172.16.200.104","port":"1883","clientid":"","autoConnect":true,"usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"5fad6cad1d4cd6d2","type":"mqtt-broker","name":"","broker":"zcfkev.messaging.internetofthings.ibmcloud.com","port":"1883","clientid":"","autoConnect":true,"usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"4a871acf21521142","type":"ibmiot","name":"apiKey watson iot","keepalive":"60","serverName":"zcfkev.messaging.internetofthings.ibmcloud.com","cleansession":true,"appId":"zcfkev","shared":false},{"id":"18c57cafdaecba75","type":"wiotp-credentials","name":"","org":"zcfkev","serverName":"zcfkev.messaging.internetofthings.ibmcloud.com","devType":"Sensor","devId":"Sen1","keepalive":"60","cleansession":true,"tls":"","usetls":false},{"id":"6a6b5645eed53aa4","type":"debug","z":"34c9f9b8dfea7642","name":"debug 3","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":540,"y":100,"wires":[]},{"id":"66b1b8e87cb00fb4","type":"function","z":"34c9f9b8dfea7642","name":"GeneradorDeDatosMock","func":"function generateRandomDecimalInRangeFormatted(min, max, places) {\n    let value = (Math.random() * (max - min + 1)) + min;\n    return Number.parseFloat(value).toFixed(places);\n}\n\nvar foo = [];\n\nlet value2 = \"\";\nlet value3 = \"\";\n\nfor (var i = 10001; i <= 10500; i++) {\n    var currentdate = new Date();\n    var datetime = currentdate.getDate() + \"/\"\n        + (currentdate.getMonth() + 1) + \"/\"\n        + currentdate.getFullYear() + \"-\"\n        + currentdate.getHours() + \":\"\n        + currentdate.getMinutes() + \":\"\n        + currentdate.getSeconds();\n    value2 = generateRandomDecimalInRangeFormatted(-31.835612, -31.952209, 6);\n    value3 = generateRandomDecimalInRangeFormatted(-62.272098, -62.472255, 6);\n\n    var value4 = \"\";\n    value4 = value4 + \"pos\" + i + \":['\" + i + \",\" + i + \",\" + value2 + \"/\" + value3 + \",\" + datetime + \"']\";\n\n    foo.push(value4);\n}\n\nmsg.payload = \"{\"+foo.toString()+\"}\";\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":100,"wires":[["6a6b5645eed53aa4","5d0b28edfaaef04c"]]},{"id":"4f5ce21d9f014dd6","type":"inject","z":"34c9f9b8dfea7642","name":"","props":[],"repeat":"10","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":90,"y":100,"wires":[["66b1b8e87cb00fb4"]]},{"id":"0ab41bc45b1ce069","type":"debug","z":"34c9f9b8dfea7642","name":"debug 4","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":840,"y":160,"wires":[]},{"id":"5d0b28edfaaef04c","type":"wiotp out","z":"34c9f9b8dfea7642","authType":"d","qs":"false","qsDeviceId":"","deviceKey":"18c57cafdaecba75","deviceType":"","deviceId":"","event":"event","format":"json","qos":"","name":"Sensor","x":540,"y":160,"wires":[]},{"id":"a70b49e74960ee1c","type":"ibmiot in","z":"34c9f9b8dfea7642","authentication":"apiKey","apiKey":"4a871acf21521142","inputType":"evt","logicalInterface":"","ruleId":"","deviceId":"","applicationId":"","deviceType":"+","eventType":"+","commandType":"","format":"json","name":"IBM IoT","service":"registered","allDevices":"","allApplications":"","allDeviceTypes":true,"allLogicalInterfaces":"","allEvents":true,"allCommands":"","allFormats":"","qos":0,"x":670,"y":160,"wires":[["0ab41bc45b1ce069"]]},{"id":"28acbce613de4783","type":"http request","z":"b1ac06542da0d53a","name":"GET Token","method":"POST","ret":"txt","paytoqs":"body","url":"https://iam.cloud.ibm.com/identity/token","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":350,"y":100,"wires":[["61a283dc345f8eb1","18a20f8524115c3f"]]},{"id":"361285b9e787bbfc","type":"inject","z":"b1ac06542da0d53a","name":"","props":[{"p":"payload"},{"p":"headers['Authorization']","v":"Basic Yng6Yng","vt":"str"},{"p":"headers['Content-Type']","v":"application/x-www-form-urlencoded","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"apikey=QZ-vn3FxxovGrBBiTnq0SfzV1HSDaXWvckyuVWZfwY9O&grant_type=urn%3Aibm%3Aparams%3Aoauth%3Agrant-type%3Aapikey","payloadType":"str","x":170,"y":100,"wires":[["28acbce613de4783"]]},{"id":"61a283dc345f8eb1","type":"debug","z":"b1ac06542da0d53a","name":"debug 4","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":570,"y":100,"wires":[]},{"id":"18a20f8524115c3f","type":"function","z":"b1ac06542da0d53a","name":"extractToken1","func":"//convierto la respuesta en string y la guardo en la variable response \nlet response = msg.payload.toString();\n//busco el indice en donde termina el token\nlet indice = response.indexOf('\"refresh_token\":\"') - 2;\n//busco el token y lo guardo en la variable token\nlet bearer = 'Bearer ';\nlet token = bearer.concat(response.substring(17, indice));\n//guardo el token en la variable por defecto\n//msg.token = token;\nmsg.headers['Authorization'] = token;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":560,"y":200,"wires":[["655733b2cc406836","45a79624bf06e8dc"]]},{"id":"655733b2cc406836","type":"debug","z":"b1ac06542da0d53a","name":"debug 5","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"token","targetType":"msg","statusVal":"","statusType":"auto","x":770,"y":180,"wires":[]},{"id":"c250ab565a236e80","type":"http request","z":"b1ac06542da0d53a","name":"GET Jobs","method":"GET","ret":"obj","paytoqs":"body","url":"https://api.dataengine.cloud.ibm.com/v3/sql_jobs?type=batch&instance_crn=crn:v1:bluemix:public:sql-query:us-south:a/522b5329f4504bd69431b11e8352f2a8:003f66c1-1f69-4abd-9530-515f9454df92::","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":920,"y":320,"wires":[["b39e30d553a296ec"]]},{"id":"b39e30d553a296ec","type":"debug","z":"b1ac06542da0d53a","name":"debug 7","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1100,"y":320,"wires":[]},{"id":"87f86079d9b53f65","type":"http request","z":"b1ac06542da0d53a","name":"POST Jobs","method":"POST","ret":"obj","paytoqs":"ignore","url":"https://api.dataengine.cloud.ibm.com/v3/sql_jobs?instance_crn=crn:v1:bluemix:public:sql-query:us-south:a/522b5329f4504bd69431b11e8352f2a8:003f66c1-1f69-4abd-9530-515f9454df92::","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":810,"y":420,"wires":[["4f664f6a3238606d"]]},{"id":"4f664f6a3238606d","type":"debug","z":"b1ac06542da0d53a","name":"debug 8","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":980,"y":420,"wires":[]},{"id":"45a79624bf06e8dc","type":"function","z":"b1ac06542da0d53a","name":"","func":"msg.headers['Accept'] = 'application/json';\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":740,"y":320,"wires":[["c250ab565a236e80"]]},{"id":"ad63f5daf75d4a82","type":"debug","z":"b1ac06542da0d53a","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":750,"y":520,"wires":[]},{"id":"945952fceb8ba423","type":"inject","z":"b1ac06542da0d53a","name":"","props":[{"p":"payload"},{"p":"headers['Authorization']","v":"Basic Yng6Yng","vt":"str"},{"p":"headers['Content-Type']","v":"application/x-www-form-urlencoded","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"apikey=QZ-vn3FxxovGrBBiTnq0SfzV1HSDaXWvckyuVWZfwY9O&grant_type=urn%3Aibm%3Aparams%3Aoauth%3Agrant-type%3Aapikey","payloadType":"str","x":170,"y":300,"wires":[["1af303c0b2eb179b"]]},{"id":"1af303c0b2eb179b","type":"http request","z":"b1ac06542da0d53a","name":"GET Token","method":"POST","ret":"txt","paytoqs":"body","url":"https://iam.cloud.ibm.com/identity/token","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":350,"y":300,"wires":[["18a5b99c3e26e221"]]},{"id":"18a5b99c3e26e221","type":"function","z":"b1ac06542da0d53a","name":"extractToken2","func":"//convierto la respuesta en string y la guardo en la variable response \nlet response = msg.payload.toString();\n//busco el indice en donde termina el token\nlet indice = response.indexOf('\"refresh_token\":\"') - 2;\n//busco el token y lo guardo en la variable token\nlet bearer = 'Bearer ';\nlet token = bearer.concat(response.substring(17, indice));\n//guardo el token en la variable por defecto\n//msg.token = token;\n\nmsg.headers['Authorization'] = token;\nmsg.payload = '{\"statement\":\"SELECT `Dr Number` AS id, `Date Occurred` AS date, `Time Occurred` AS time, `Area Name` AS area, `Victim Age` AS age, `Victim Sex` AS sex, `Location` AS location FROM cos://us-south/data-lake-cos-test/Traffic_Collision_Data_from_2010_to_Present.csv WHERE `Time Occurred` >= 1700 AND `Time Occurred` <= 2000 AND `Victim Age` >= 20 AND `Victim Age` <= 35 INTO cos://us-south/data-lake-cos-test/q1-results\"}';\nmsg.headers['Accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\ndelete msg.statusCode;\ndelete msg.responseUrl;\n//delete msg.headers['x-content-type-options'];\n//delete msg.headers['transaction-id'];\n//delete msg.headers['x-request-id'];\n//delete msg.headers['x-correlation-id'];\n//delete msg.headers['cache-control'];\n//delete msg.headers['expires'];\n//delete msg.headers['pragma'];\n//delete msg.headers['content-language'];\ndelete msg.headers['content-length'];\n//delete msg.headers['strict-transport-security'];\n//delete msg.headers['date'];\n//delete msg.headers['akamai-grn'];\n//delete msg.headers['x-proxy-upstream-service-time'];\n//delete msg.headers['x-node-red-request-node'];\n//delete msg.headers['content-type'];\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":560,"y":360,"wires":[["87f86079d9b53f65","ad63f5daf75d4a82"]]},{"id":"3b9167e9ba84f841","type":"inject","z":"b1ac06542da0d53a","name":"","props":[{"p":"headers['Content-Type']","v":"text/plain; charset=utf-8","vt":"str"},{"p":"headers['Authorization']","v":"Bearer eyJraWQiOiIyMDIyMTAxMzA4MjciLCJhbGciOiJSUzI1NiJ9.eyJpYW1faWQiOiJJQk1pZC01NTAwMDk0NUcwIiwiaWQiOiJJQk1pZC01NTAwMDk0NUcwIiwicmVhbG1pZCI6IklCTWlkIiwic2Vzc2lvbl9pZCI6IkMtNTFiN2UxOTAtYzQ3Ni00MDU4LWFiYTQtYTA5ZmExMTgyMGRhIiwic2Vzc2lvbl9leHBfbWF4IjoxNjY3NDEzOTgyLCJzZXNzaW9uX2V4cF9uZXh0IjoxNjY3MzM0NzgyLCJqdGkiOiJkNzEzYmE4Ni05MWVmLTRiNzYtOGJmOC1iMmJjMzMxN2VhYTYiLCJpZGVudGlmaWVyIjoiNTUwMDA5NDVHMCIsImdpdmVuX25hbWUiOiJGYWN1bmRvIiwiZmFtaWx5X25hbWUiOiJGZXNzaWEiLCJuYW1lIjoiRmFjdW5kbyBGZXNzaWEiLCJlbWFpbCI6ImZmZXNzaWFAZS1tb3phcnQuY29tIiwic3ViIjoiZmZlc3NpYUBlLW1vemFydC5jb20iLCJhdXRobiI6eyJzdWIiOiJmZmVzc2lhQGUtbW96YXJ0LmNvbSIsImlhbV9pZCI6IklCTWlkLTU1MDAwOTQ1RzAiLCJuYW1lIjoiRmFjdW5kbyBGZXNzaWEiLCJnaXZlbl9uYW1lIjoiRmFjdW5kbyIsImZhbWlseV9uYW1lIjoiRmVzc2lhIiwiZW1haWwiOiJmZmVzc2lhQGUtbW96YXJ0LmNvbSJ9LCJhY2NvdW50Ijp7ImJvdW5kYXJ5IjoiZ2xvYmFsIiwidmFsaWQiOnRydWUsImJzcyI6IjUyMmI1MzI5ZjQ1MDRiZDY5NDMxYjExZTgzNTJmMmE4IiwiaW1zX3VzZXJfaWQiOiIxMDI1MzQ3NCIsImZyb3plbiI6dHJ1ZSwiaW1zIjoiODcwMjM5In0sImlhdCI6MTY2NzMyNzU3OSwiZXhwIjoxNjY3MzI4Nzc5LCJpc3MiOiJodHRwczovL2lhbS5jbG91ZC5pYm0uY29tL2lkZW50aXR5IiwiZ3JhbnRfdHlwZSI6InVybjppYm06cGFyYW1zOm9hdXRoOmdyYW50LXR5cGU6YXBpa2V5Iiwic2NvcGUiOiJpYm0gb3BlbmlkIiwiY2xpZW50X2lkIjoiYngiLCJhY3IiOjEsImFtciI6WyJwd2QiXX0.pCtIKJr2h6NA7TKI221GwKNoKw1QKjhdcC4Xbt6Gh67ajDWjlNhLYeyX-ahcTogf0cl1495gm7kwGhL3a8ZE5S-8LkCULAoY8IgItgrRsbr4HYB0-BfbrEonGXdBv1EgApRT_xOPxV9EhMjZ6PaVzQP8QA15m0RqJxSnYx2CfOpcQyxA2zAFcVeHS3s-wW8MSkQ97oMH8vCOlSfWzJmlu9NxUAf3do0poxLvYNrWn4TaEv3phgBm0CyJlDQ7zsGs9OSR8f2pQygrf6wZUO9NI8U0oWVqfm3TwB88NPWGDXGklMXpED-cuoSCPd-8ofK7LJilyWiQHW-Bc24IkTi_-w","vt":"str"},{"p":"msg.payload.listas","v":"1","vt":"str"},{"p":"msg.payload.vacas","v":"10","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":170,"y":580,"wires":[["11d10f3e1506c149"]]},{"id":"3f2dcc62632120aa","type":"http request","z":"b1ac06542da0d53a","name":"","method":"PUT","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":710,"y":580,"wires":[["c3fb9de25913c34f"]]},{"id":"c3fb9de25913c34f","type":"debug","z":"b1ac06542da0d53a","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1010,"y":580,"wires":[]},{"id":"11d10f3e1506c149","type":"function","z":"b1ac06542da0d53a","name":"","func":"//const fs = require('fs');\n//const { exit } = require('process');\n\nfunction generateRandomDecimalInRangeFormatted(min, max, places = 6) {\n    let value = Math.random() * (max - min + 1) + min;\n    return Number.parseFloat(value).toFixed(places);\n}\n\nfunction editarUbicacion(ub, places = 6, min = 0.000025, max = 0.000025) {\n    /**\n     * Genera un nuevo valor de longitud o latitud a partir de un valor base.\n     * El valor es modificado por un numero al azar tal que min <= x <= max\n     * @param {String|Number} ub           El valor base a modificar\n     * @param {Number}        places       La cantidad de decimales del valor a obtener\n     */\n    let value = Number(ub) + (Math.random() * (max - min) + min);\n    let result = Number.parseFloat(value).toFixed(places);\n    return result;\n}\n\nfunction obtenerDateTimeFormateado(){\n    let currentdate = new Date();\n    currentdate.setHours(currentdate.getHours() - 3);\n    let dtime =\n        currentdate.getDate() +\n        \"/\" +\n        (currentdate.getMonth() + 1) +\n        \"/\" +\n        currentdate.getFullYear() +\n        \"-\" +\n        currentdate.getHours() +\n        \":\" +\n        currentdate.getMinutes() +\n        \":\" +\n        currentdate.getSeconds();\n    return dtime\n}\n\nfunction nuevaListaUbicaciones(id_min = 0, id_max = 10,\n     lat_min = -31.835612, lat_max = -31.952209,\n     lon_min = -62.272098, lon_max = -62.472255) {\n    /** \n    * Genera una lista de ubicaciones aleatorias asociadas a ids.\n    * @param {int} id_min   Primer id asociado\n    * @param {int} id_max   Último id asociado\n    */ \n    let foo = [];\n    let lat;\n    let lon;\n  \n    for (let i = id_min; i <= id_max; i++) {\n        lat = generateRandomDecimalInRangeFormatted(lat_min, lat_max);\n        lon = generateRandomDecimalInRangeFormatted(lon_min, lon_max);\n        let fecha  = new Date();\n        fecha.setHours(fecha.getHours() - 3);\n        \n        foo.push({\n            idSensor: i,\n            idVaca: i,\n            latitud: lat,\n            longitud: lon,\n            dateTime: fecha.toISOString(),\n        });\n    }\n    return foo;\n}\n\nfunction modificarListaUbicaciones(ub){\n    /**\n     * Genera una nueva lista de ubicaciones a partir de una lista existente\n     * @param {Array} ub    Lista original\n     *  */\n    let nueva_lista = [];\n    for (let i = 0; i < ub.length; i++) {\n        let nueva_latitud = editarUbicacion(ub[i].latitud);\n        let nueva_longitud = editarUbicacion(ub[i].longitud);\n        let anterior_fecha = new Date(ub[i].dateTime);\n        // Modificar la siguiente línea para cambiar el intervalo de tiempo\n        anterior_fecha.setMinutes(anterior_fecha.getMinutes() + 5);\n        let nueva_fecha = anterior_fecha.toISOString();\n        let foo = {\n            idSensor: ub[i].idSensor,\n            idVaca: ub[i].idVaca,\n            latitud: nueva_latitud,\n            longitud: nueva_longitud,\n            dateTime: nueva_fecha,\n        }; \n        nueva_lista.push(foo);\n    }\n    return nueva_lista;\n}\n\nfunction generarUbicaciones(n_listas = 10, n_vacas = 10) {\n    /**\n     * Genera listas de ubicaciones de vacas y las guarda en un .csv\n     * @param {int} n_vacas         Cantidad de vacas\n     * @param {int} n_listas        Cantidad de listas\n     */\n    let ubs = [];\n    ubs.push(nuevaListaUbicaciones(1, n_vacas));\n\n    for(let i = 0; i < n_listas; i++){\n        ubs.push(modificarListaUbicaciones(ubs[i]));\n    }\n    return ubs;\n}\n\nfunction generarCSVString(lista){\n    /**\n     * Genera un string formateado para CSV a partir de una lista de Ubicaciones\n     * @param {Array} lista     La lista a partir de la cual se genera el string\n     */\n    let csvList = []\n    csvList = lista.map(item => [\n        item.idSensor,\n        item.idVaca,\n        item.latitud,\n        item.longitud,\n        item.dateTime\n    ]);\n    csvList.unshift([\n        \"ID Sensor\",\n        \"ID Vaca\",\n        \"Latitud\",\n        \"Longitud\",\n        \"Fecha/Hora\"\n    ]);\n\n    return csvList.map(item => item.join(\",\"))\n           .join(\"\\n\");\n}\n\n/**\n * Usage: Se debe ejecutar el script con 2 argumentos\n * El primero es la cantidad de ubicaciones a generar por vaca\n * El segundo es la cantidad de vacas\n * \n * Ejemplo: Si los argumentos son 5 y 10, se generarán 5 listas de ubicaciones\n * de 10 vacas cada una.\n * \n * \n * El resultado se guarda en 'test.csv'\n */\n\nlet n_listas = msg.payload.listas;\nlet n_vacas = msg.payload.vacas;\n\nlet ubicaciones = generarUbicaciones(n_listas, n_vacas);\nlet lista = [];\nfor(let i = 0; i < ubicaciones.length; i++){\n    lista = lista.concat(ubicaciones[i]);\n}\nlet csvString = generarCSVString(lista);\n\nmsg.url = 'https://s3.us-south.cloud-object-storage.appdomain.cloud/data-lake-cos-test/' + obtenerDateTimeFormateado() + '.csv';\nmsg.payload = csvString;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":580,"wires":[["3f2dcc62632120aa"]]},{"id":"11b4e664139db8cc","type":"http request","z":"c55edf5e987e3807","name":"","method":"PUT","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":1030,"y":320,"wires":[["84abbb827fb2db86"]]},{"id":"84abbb827fb2db86","type":"debug","z":"c55edf5e987e3807","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1210,"y":320,"wires":[]},{"id":"7b28b930a74e51fe","type":"function","z":"c55edf5e987e3807","name":"","func":"//const fs = require('fs');\n//const { exit } = require('process');\n\nfunction generateRandomDecimalInRangeFormatted(min, max, places = 6) {\n    let value = Math.random() * (max - min + 1) + min;\n    return Number.parseFloat(value).toFixed(places);\n}\n\nfunction editarUbicacion(ub, places = 6, min = 0.000025, max = 0.000025) {\n    /**\n     * Genera un nuevo valor de longitud o latitud a partir de un valor base.\n     * El valor es modificado por un numero al azar tal que min <= x <= max\n     * @param {String|Number} ub           El valor base a modificar\n     * @param {Number}        places       La cantidad de decimales del valor a obtener\n     */\n    let value = Number(ub) + (Math.random() * (max - min) + min);\n    let result = Number.parseFloat(value).toFixed(places);\n    return result;\n}\n\nfunction obtenerDateTimeFormateado(){\n    let currentdate = new Date();\n    currentdate.setHours(currentdate.getHours() - 3);\n    let dtime =\n        currentdate.getDate() +\n        \"/\" +\n        (currentdate.getMonth() + 1) +\n        \"/\" +\n        currentdate.getFullYear() +\n        \"-\" +\n        currentdate.getHours() +\n        \":\" +\n        currentdate.getMinutes() +\n        \":\" +\n        currentdate.getSeconds();\n    return dtime\n}\n\nfunction nuevaListaUbicaciones(id_min = 0, id_max = 10,\n     lat_min = -31.835612, lat_max = -31.952209,\n     lon_min = -62.272098, lon_max = -62.472255) {\n    /** \n    * Genera una lista de ubicaciones aleatorias asociadas a ids.\n    * @param {int} id_min   Primer id asociado\n    * @param {int} id_max   Último id asociado\n    */ \n    let foo = [];\n    let lat;\n    let lon;\n  \n    for (let i = id_min; i <= id_max; i++) {\n        lat = generateRandomDecimalInRangeFormatted(lat_min, lat_max);\n        lon = generateRandomDecimalInRangeFormatted(lon_min, lon_max);\n        let fecha  = new Date();\n        fecha.setHours(fecha.getHours() - 3);\n        \n        foo.push({\n            idSensor: i,\n            idVaca: i,\n            latitud: lat,\n            longitud: lon,\n            dateTime: fecha.toISOString(),\n        });\n    }\n    return foo;\n}\n\nfunction modificarListaUbicaciones(ub){\n    /**\n     * Genera una nueva lista de ubicaciones a partir de una lista existente\n     * @param {Array} ub    Lista original\n     *  */\n    let nueva_lista = [];\n    for (let i = 0; i < ub.length; i++) {\n        let nueva_latitud = editarUbicacion(ub[i].latitud);\n        let nueva_longitud = editarUbicacion(ub[i].longitud);\n        let anterior_fecha = new Date(ub[i].dateTime);\n        // Modificar la siguiente línea para cambiar el intervalo de tiempo\n        anterior_fecha.setMinutes(anterior_fecha.getMinutes() + 5);\n        let nueva_fecha = anterior_fecha.toISOString();\n        let foo = {\n            idSensor: ub[i].idSensor,\n            idVaca: ub[i].idVaca,\n            latitud: nueva_latitud,\n            longitud: nueva_longitud,\n            dateTime: nueva_fecha,\n        }; \n        nueva_lista.push(foo);\n    }\n    return nueva_lista;\n}\n\nfunction generarUbicaciones(n_listas = 10, n_vacas = 10) {\n    /**\n     * Genera listas de ubicaciones de vacas y las guarda en un .csv\n     * @param {int} n_vacas         Cantidad de vacas\n     * @param {int} n_listas        Cantidad de listas\n     */\n    let ubs = [];\n    ubs.push(nuevaListaUbicaciones(1, n_vacas));\n\n    for(let i = 0; i < n_listas; i++){\n        ubs.push(modificarListaUbicaciones(ubs[i]));\n    }\n    return ubs;\n}\n\nfunction generarCSVString(lista){\n    /**\n     * Genera un string formateado para CSV a partir de una lista de Ubicaciones\n     * @param {Array} lista     La lista a partir de la cual se genera el string\n     */\n    let csvList = []\n    csvList = lista.map(item => [\n        item.idSensor,\n        item.idVaca,\n        item.latitud,\n        item.longitud,\n        item.dateTime\n    ]);\n    csvList.unshift([\n        \"ID Sensor\",\n        \"ID Vaca\",\n        \"Latitud\",\n        \"Longitud\",\n        \"Fecha/Hora\"\n    ]);\n\n    return csvList.map(item => item.join(\",\"))\n           .join(\"\\n\");\n}\n\n/**\n * Usage: Se debe ejecutar el script con 2 argumentos\n * El primero es la cantidad de ubicaciones a generar por vaca\n * El segundo es la cantidad de vacas\n * \n * Ejemplo: Si los argumentos son 5 y 10, se generarán 5 listas de ubicaciones\n * de 10 vacas cada una.\n * \n * \n * El resultado se guarda en 'test.csv'\n */\n\nlet n_listas = msg.payload.listas;\nlet n_vacas = msg.payload.vacas;\n\nlet ubicaciones = generarUbicaciones(n_listas, n_vacas);\nlet lista = [];\nfor(let i = 0; i < ubicaciones.length; i++){\n    lista = lista.concat(ubicaciones[i]);\n}\nlet csvString = generarCSVString(lista);\n\nmsg.url = 'https://s3.us-south.cloud-object-storage.appdomain.cloud/data-lake-cos-test/' + obtenerDateTimeFormateado() + '.csv';\nmsg.payload = csvString;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":800,"y":320,"wires":[["11b4e664139db8cc","8b36367c917a703c"]]},{"id":"29be146889e90bfe","type":"http request","z":"c55edf5e987e3807","name":"GET Token","method":"POST","ret":"txt","paytoqs":"body","url":"https://iam.cloud.ibm.com/identity/token","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":330,"y":320,"wires":[["cfd87f9962e55f7a"]]},{"id":"c8b943d1f515ff2b","type":"inject","z":"c55edf5e987e3807","name":"","props":[{"p":"payload"},{"p":"headers['Authorization']","v":"Basic Yng6Yng","vt":"str"},{"p":"headers['Content-Type']","v":"application/x-www-form-urlencoded","vt":"str"},{"p":"payload.listas","v":"1","vt":"str"},{"p":"payload.vacas","v":"10","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"apikey=QZ-vn3FxxovGrBBiTnq0SfzV1HSDaXWvckyuVWZfwY9O&grant_type=urn%3Aibm%3Aparams%3Aoauth%3Agrant-type%3Aapikey","payloadType":"str","x":170,"y":320,"wires":[["29be146889e90bfe"]]},{"id":"cfd87f9962e55f7a","type":"function","z":"c55edf5e987e3807","name":"extractToken2","func":"//convierto la respuesta en string y la guardo en la variable response \nlet response = msg.payload.toString();\n//busco el indice en donde termina el token\nlet indice = response.indexOf('\"refresh_token\":\"') - 2;\n//busco el token y lo guardo en la variable token\nlet bearer = 'Bearer ';\nlet token = bearer.concat(response.substring(17, indice));\n//guardo el token en la variable por defecto\n//msg.token = token;\n\nmsg.headers['Authorization'] = token;\ndelete msg.statusCode;\ndelete msg.responseUrl;\n//delete msg.headers['x-content-type-options'];\n//delete msg.headers['transaction-id'];\n//delete msg.headers['x-request-id'];\n//delete msg.headers['x-correlation-id'];\n//delete msg.headers['cache-control'];\n//delete msg.headers['expires'];\n//delete msg.headers['pragma'];\n//delete msg.headers['content-language'];\ndelete msg.headers['content-length'];\n//delete msg.headers['strict-transport-security'];\n//delete msg.headers['date'];\n//delete msg.headers['akamai-grn'];\n//delete msg.headers['x-proxy-upstream-service-time'];\n//delete msg.headers['x-node-red-request-node'];\n//delete msg.headers['content-type'];\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":560,"y":320,"wires":[["7b28b930a74e51fe"]]},{"id":"8b36367c917a703c","type":"debug","z":"c55edf5e987e3807","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1050,"y":460,"wires":[]},{"id":"bc289541583ce596","type":"uibuilder","z":"785a0a21106c29bb","name":"","topic":"","url":"www.lasso.com","fwdInMessages":false,"allowScripts":false,"allowStyles":false,"copyIndex":true,"templateFolder":"svelte-basic","extTemplate":"","showfolder":false,"reload":false,"sourceFolder":"src","deployedVersion":"5.1.1","x":490,"y":200,"wires":[["eecd3c4afd95f176"],[]]},{"id":"eecd3c4afd95f176","type":"debug","z":"785a0a21106c29bb","name":"Debug1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":860,"y":100,"wires":[]}]